{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/English/Speak_day08/",
    "result": {"data":{"cur":{"id":"f5abddb8-f796-582e-a07d-747de914cec9","html":"<h2 id=\"aim-to\" style=\"position:relative;\"><a href=\"#aim-to\" aria-label=\"aim to permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aim to</h2>\n<blockquote>\n<p>We should aim + [to 부정사]</p>\n</blockquote>\n<ul>\n<li>To + V</li>\n<li>to grow our user base</li>\n<li>to increase our production</li>\n<li>to branch out internationally</li>\n<li>to increase our revenue</li>\n<li>to cut down production costs by 20%</li>\n<li>to launch new content by April</li>\n</ul>\n<h2 id=\"shortlong-term-goal\" style=\"position:relative;\"><a href=\"#shortlong-term-goal\" aria-label=\"shortlong term goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Short/Long term goal</h2>\n<blockquote>\n<p>Our short term goal is to increase user satisfaction by 30%</p>\n<p>Our long term goal is to double the number of subscribers.</p>\n<p>Our long term goal is to cut down production costs by 20%</p>\n</blockquote>\n<h2 id=\"to-that-end\" style=\"position:relative;\"><a href=\"#to-that-end\" aria-label=\"to that end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To that end</h2>\n<blockquote>\n<p>To that end, we need all hands on deck</p>\n<p>To that end, we need more engineers.</p>\n</blockquote>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#aim-to\">Aim to</a></li>\n<li><a href=\"#shortlong-term-goal\">Short/Long term goal</a></li>\n<li><a href=\"#to-that-end\">To that end</a></li>\n</ul>\n</div>","excerpt":"Aim to We should aim + [to 부정사] To + V to grow our user base to increase our production to branch out internationally to increase our revenue to cut down production costs by 20% to launch new content by April Short/Long term goal Our short term goal is to increase user satisfaction by 30% Our long term goal is to double the number of subscribers. Our long term goal is to cut down production costs by 20% To that end To that end, we need all hands on deck To that end, we need more engineers. Aim …","frontmatter":{"date":"December 21, 2022","title":"Speak Day08 - 목표 달성을 위해서, 전사적인 노력이 필요합니다.","categories":"Engilsh","author":"Mini","emoji":"💬"},"fields":{"slug":"/English/Speak_day08/"}},"next":{"id":"d3c70a4d-4729-58c3-8144-aba444871dab","html":"<h2 id=\"몰랐던-표현\" style=\"position:relative;\"><a href=\"#%EB%AA%B0%EB%9E%90%EB%8D%98-%ED%91%9C%ED%98%84\" aria-label=\"몰랐던 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>몰랐던 표현</h2>\n<ul>\n<li>\n<p>What are you having? : (카페에서) 무엇을 마시고 있니? / 먹고 있니?</p>\n</li>\n<li>\n<p>What brings you to me? : 어쩐 일로 오셨나요?</p>\n</li>\n<li>\n<p>What caused you to be interested in that? / What made you interested in that? : 그것에 관심을 가지게 된 계기는 무엇인가요?</p>\n</li>\n</ul>\n<blockquote>\n<p>“What made you interested in that” 과 “What made you be interested in that”의 차이점</p>\n</blockquote>\n<ul>\n<li>Are you used to working remotely? (-> custom, 관습) : 원격 근문에 익숙한가요?</li>\n<li>I used to live in another country (-> action finished in the past) : 나는 다른 나라에서 살았었습니다.</li>\n</ul>\n<blockquote>\n<p>“I used to live in another county”와 “I libed in another country”의 차이점</p>\n</blockquote>\n<ul>\n<li>\n<p>How did it go? : 어땠어?</p>\n<ul>\n<li>How did it go in terms of English? : 영어로는 어땠어?</li>\n</ul>\n</li>\n<li>\n<p>to go over things : 일을 검토하기 위해서</p>\n</li>\n<li>\n<p>similar to (similar with ❌)</p>\n</li>\n<li>\n<p>We need to coordinate different timezone. / We need to synchronise different timezone.</p>\n</li>\n<li>\n<p>Will you be able to ask questions that you had? : 물으려고 했던 질문을 물을 수 있니?</p>\n</li>\n</ul>\n<h2 id=\"새로-배운-표현\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%ED%91%9C%ED%98%84\" aria-label=\"새로 배운 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로 배운 표현</h2>\n<ul>\n<li>\n<p>say again? / come again?</p>\n</li>\n<li>\n<p>The signal is cutting</p>\n</li>\n<li>\n<p>to play phone tag : 서로 전화 타이밍이 안맞아서 계속 부재중만 남는 상황</p>\n<ul>\n<li>e.g. We’ve been playing a bit of phone tag toady, huh?</li>\n</ul>\n</li>\n<li>\n<p>to get a hold of someone : (주로 폰을 통해서) 이야기하다</p>\n<ul>\n<li>e.g. I’m trying to get a hold of Mr.johnson.</li>\n</ul>\n</li>\n<li>\n<p>to keep someone posted : 최신 근황을 전달해주는 것</p>\n<ul>\n<li>e.g. Keep me posted on your progress.</li>\n</ul>\n</li>\n<li>\n<p>Sorry, the project X is on hold at the moment : 현재 프로젝트 X는 보류중이다.</p>\n</li>\n<li>\n<p>Can you hold this for me? : 이걸 잠시 킵해주실 수 있나요?</p>\n</li>\n<li>\n<p>Idiom: 관용구, 숙어</p>\n</li>\n</ul>\n<h2 id=\"틀린-표현\" style=\"position:relative;\"><a href=\"#%ED%8B%80%EB%A6%B0-%ED%91%9C%ED%98%84\" aria-label=\"틀린 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>틀린 표현</h2>\n<ul>\n<li>I was hired as an intern at Cisco systems.</li>\n<li>I finished my master degree.</li>\n<li>I’m getting used to it : 익숙해지다</li>\n<li>I had the online meeting with new boss.</li>\n<li>I ask (person) to repeat</li>\n<li>I can’t understand this. Can you say that again?</li>\n<li>I can’t hear you properly. Can you speak slow down? / Can you speak more slowly?</li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AA%B0%EB%9E%90%EB%8D%98-%ED%91%9C%ED%98%84\">몰랐던 표현</a></li>\n<li><a href=\"#%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%ED%91%9C%ED%98%84\">새로 배운 표현</a></li>\n<li><a href=\"#%ED%8B%80%EB%A6%B0-%ED%91%9C%ED%98%84\">틀린 표현</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2022","title":"Cambly - Business English Class with Stuart on December 20th","categories":"English","author":"Mini","emoji":"💬"},"fields":{"slug":"/English/Cambly_221220/"}},"prev":{"id":"261b368e-3830-5c7f-8577-bf482b635475","html":"<h2 id=\"1-process-concept\" style=\"position:relative;\"><a href=\"#1-process-concept\" aria-label=\"1 process concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Process Concept</h2>\n<ul>\n<li>\n<p>프로세스란?</p>\n<ul>\n<li>실행 중인 프로그램</li>\n<li>OS에서 작업의 단위</li>\n</ul>\n</li>\n<li>\n<p>프로세스는 작업(task)를 위해 아래의 리소스를 필요로 함</p>\n<ul>\n<li>CPU time</li>\n<li>memory</li>\n<li>files</li>\n<li>I/O devices</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>따라서, OS의 가장 기본적인 일은 ‘프로세스를 관리’하는 작업</p>\n</blockquote>\n<ul>\n<li>프로세스 메모리 section\n<ul>\n<li>Text section: 실행 코드</li>\n<li>Data section: 전역 변수</li>\n<li>Heap sectiom: 프로그램이 실행하는 동안 동적으로 할당하는 메모리 (e.g. malloc)</li>\n<li>Stack section: 함수 호출 시 임시 데이터 저장소 (함수 파라미터, return 주소값, 지역변수)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>소스 코드 -(컴파일)-> 프로그램 (a.out) -(메모리 로드)-> 프로세스</p>\n</blockquote>\n<ul>\n<li>\n<p>프로세스의 생명 주기(state)</p>\n<ul>\n<li>New: 프로세스가 생성된 상태</li>\n<li>Running: CPU를 프로세스가 점유(scheduler dispatch)하어, 프로세스의 명령어가 CPU에 fetch되어 실행되는 상태</li>\n<li>Waiting: 이벤트가 발생하여 이벤트가 끝날 때를 기다리는 상태 (주로 I/O completion, signal reception)</li>\n<li>Ready: CPU의 점유를 ready queue에서 기다리는 상태</li>\n<li>Terminated: 프로세스가 실행이 끝난 상태</li>\n</ul>\n</li>\n<li>\n<p>PCB(Process Control Block) / TCB (Task Control Block)</p>\n<ul>\n<li>구조체에 각 프로세스가 가져야할 아래의 정보를 담아 관리</li>\n<li>process state</li>\n<li>program counter -> context</li>\n<li>CPU register (Instruction Register, Data Register) -> context</li>\n<li>CPU-schduling information</li>\n<li>Memory-management information</li>\n<li>Accounting information</li>\n<li>I/O status information</li>\n</ul>\n</li>\n<li>\n<p>Multi-processing / Multi-Tasking</p>\n<ul>\n<li>process: 하나의 실행 흐름을 수행하는 프로그램 (기존) + 여러 개의 실행 흐름 수행하는 프로그램 (현대)</li>\n<li>따라서 현대의 OS는 하나 이상의 task를 한 번에 수행할 수 있도록 관리</li>\n</ul>\n</li>\n<li>\n<p>Thread</p>\n<ul>\n<li>lightweight process</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-process-scheduling\" style=\"position:relative;\"><a href=\"#2-process-scheduling\" aria-label=\"2 process scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process Scheduling</h2>\n<ul>\n<li>\n<p>Multiprogramming / Multiprocess</p>\n<ul>\n<li>목적: 동시에 여러 프로그램을 실행</li>\n<li>cf. at the same time / simultaneously / concurrently &#x3C;-> parallel</li>\n<li>이유: CPU utilization을 최대화</li>\n</ul>\n</li>\n<li>\n<p>Time sharing</p>\n<ul>\n<li>목적: CPU core를 프로세스에게 자주 switch -> 사용자가 여러 프로그램이 동시에 running되고 있는 것처럼 상호작용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>Scheduling Queue</p>\n<ul>\n<li>Time sharing을 위해 Process를 스케쥴링하기 위한 Queue(FIFO)</li>\n<li>프로세스는 ready queue에서 ready state로 대기하고 있다가, CPU core를 획득함</li>\n<li>waiting state일 경우: 프로세스는 각 I/O device의 wait queue에서 대기 -> I/O가 완료되면 CPU core의 ready queue로 들어가서 ready state로 대기</li>\n<li>Queue 실제 구현: PCB의 linked list로 구현</li>\n<li>Queueing:\n<ol>\n<li>I/O request: I/O queue에서 대기 -> I/O 종료 -> 프로세스는 CPU의 ready queue로 들어감</li>\n<li>time slice expired: 바로 프로세스는 CPU의 ready queue로 들어감</li>\n<li>fork a child: 자식 프로세스가 CPU의 ready queue로 들어감</li>\n<li>wait for an interrupt: 인터럽트 대기 -> 인터럽트 발생 시 -> 프로세스가 CPU의 ready queue로 들어감</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>Context Switch</p>\n<ul>\n<li>Context: 프로세스가 사용되고 있는 상태 = PCB의 정보</li>\n<li>interrupt 발생 시:\n<ul>\n<li>running 프로세스의 현재 context(PCB 정보)를 시스템에 저장</li>\n<li>ready queue에 있다가 CPU를 다시 점유하여 프로세스가 재개되었을 때, 저장된 context를 복원</li>\n</ul>\n</li>\n<li>Context Switch란:\n<ul>\n<li>CPU Core를 다른 프로세스에게 넘겨주는 작업\n<ul>\n<li>이 때, 현재 프로세스의 state(PCB)를 저장</li>\n<li>CPU를 넘겨줄 프로세스의 state(PCB)를 복원</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-operations-on-processes\" style=\"position:relative;\"><a href=\"#3-operations-on-processes\" aria-label=\"3 operations on processes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Operations on Processes</h2>\n<blockquote>\n<p>OS는 프로세스 생성과 종료를 위한 메커니즘이 필요함</p>\n</blockquote>\n<ul>\n<li>\n<p>프로세스 생성</p>\n<ul>\n<li>프로세스(parent process)가 또 다른 프로세스(child process)를 생성할 경우</li>\n<li>2 possibilities for execution\n<ol>\n<li>parent가 child와 concurrently하게 실행</li>\n<li>parent가 child의 실행이 종료될 때까지 wait</li>\n</ol>\n</li>\n<li>2 possibilities for address-space\n<ol>\n<li>parent process의 duplicate</li>\n<li>memory에 new program을 load</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">fork()</code> 시스템콜을 이용한 프로세스 생성</p>\n<ul>\n<li>parent -> fork()\n-> 1) parent(pid > 0) -> wait()\n-> 2) parent(pid = 0) -> exec() -> exit()\n-> parent resumes</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">execlp()</code> 시스템콜: 현재 프로세스의 메모리를 execlp 실행 프로그램으로 덮어씌움</p>\n</blockquote>\n</li>\n<li>\n<p>프로세스 종료</p>\n<ul>\n<li>마지막 statement의 실행을 종료할 경우</li>\n<li><code class=\"language-text\">exit()</code> 시스템콜</li>\n<li>OS의 역할: 모든 리소스를 deallocate (해제) &#x26; declaim (회수)\n<ul>\n<li>resource: 메모리, 열린 파일, I/O 버퍼 등</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Zombie &#x26; Orphan(고아)</p>\n<ul>\n<li>Zombie 프로세스: child 프로세스는 종료가 되었지만, parent가 <code class=\"language-text\">wait()</code>을 통해 child 프로세스를 회수하지 않아(= 리소스가 반환되지 않아), 종료된 상태로 떠도는 프로세스</li>\n<li>Orphan 프로세스: child 프로세스가 <code class=\"language-text\">wait()</code>을 통해 회수되기 전 parent가 먼저 종료되어, 부모를 잃어버린 프로세스\n<ul>\n<li>이 경우, 고아 프로세스의 새로운 부모 프로세스로 init 프로세스를 지정함으로써 이 문제를 해결함</li>\n<li>init 프로세스는 주기적으로 <code class=\"language-text\">wait()</code> 시스템콜을 호출하여 고아 프로세스의 종료 상태를 수집하고 프로세스 id와 프로세스 테이블 반환시킴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Unix-like OS</p>\n<ul>\n<li>새로운 프로세스 생성 -> <code class=\"language-text\">fork()</code> 시스템콜</li>\n<li>child 프로세스: parent 프로세스 주소 공간의 복사본</li>\n<li>child &#x26; parent 모두 <code class=\"language-text\">fork()</code> 시스템콜 호출 instruction 이후의 instruction 부터 실행</li>\n<li>child와 parent의 차이: <code class=\"language-text\">fork()</code> 시스템콜 return 값이 child 프로세스에서는 0을 return, parent 프로세스에서는 child의 pid return</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>정리</strong>: 프로세스는 실행중인 프로그램이다. OS scheduler가 n개의 프로세스들을 concurrent하게 실행시키기 위해 CPU를 time sharing을 한다. 이를 위해 CPU 점유 시의 정보(레지스터 정보: 특히 PC와 IC)를 저장하고 복원하는 context switch가 필요하다. concurrency 환경에서 context switch를 하기 위해서는 synchronization이 필요하다.</p>\n</blockquote>\n<h2 id=\"4-interprocess-communication\" style=\"position:relative;\"><a href=\"#4-interprocess-communication\" aria-label=\"4 interprocess communication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Interprocess Communication</h2>\n<ul>\n<li>\n<p>프로세스가 concurrently하게 실행되는 경우</p>\n<ul>\n<li>Independent하게 실행되는 경우\n<ul>\n<li>다른 프로세스들과 서로 data를 share하기 않음</li>\n</ul>\n</li>\n<li>Cooperating하게 실행되는 경우\n<ul>\n<li>다른 프로세스들과 영향을 주고 받음</li>\n<li>다른 프로세스들과 서로 data를 share함</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>IPC(Inter-Process Communication)</p>\n<ul>\n<li>Cooperating 프로세스는 IPC 메커니즘이 필요하게 됨</li>\n<li>IPC는 결국 data를 서로 주고받는 것: data 전송 &#x26; data 수신</li>\n</ul>\n</li>\n<li>\n<p>IPC의 두 가지 모델</p>\n<ol>\n<li>Shared memory: Shared memory에서 데이터를 공유</li>\n<li>Message passing: Message Queue를 통해 데이터를 주고 받음</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-ipc-in-shared-memory-systems\" style=\"position:relative;\"><a href=\"#5-ipc-in-shared-memory-systems\" aria-label=\"5 ipc in shared memory systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. IPC in Shared-Memory Systems</h2>\n<ul>\n<li>\n<p>Producer-Consumer Problem</p>\n<ul>\n<li>Producer는 정보를 생성, Consumer는 정보를 소비</li>\n<li>e.g. 컴파일러가 어셈블리 코드 생성 -> 어셈블러는 어셈블리 코드를 소비, 웹 서버는 HTML 파일을 생성 -> 브라우저는 HTML 파일을 소비</li>\n</ul>\n</li>\n<li>\n<p>Shared-memory: concurrent하게 동작하는 producer와 consumer가 공유하는 메모리 영역인 shared memroy를 통해 data 주고 받음</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"shared buffer 선언\"\"><pre class=\"language-ctitle=\"shared buffer 선언\"\"><code class=\"language-ctitle=\"shared buffer 선언\"\">#define BUFFER_SIZE 10\n\ntypedef struct{\n    ...\n} item;\n\nitem buffer[BUFFER_SIZE];\nint in = 0;\nint out = 0;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"producer 프로세스\"\"><pre class=\"language-ctitle=\"producer 프로세스\"\"><code class=\"language-ctitle=\"producer 프로세스\"\">item next_produced;\n\nwhile(true){\n    /* next_produced에 하나의 item 생산 */\n\n    while(((in + 1) % BUFFER_SIZE) == out)\n        ; /* do nothing, wait */\n    \n    buffer[in] = next_produced;\n    in = (in + 1) % BUFFER_SIZE;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"consumer 프로세스\"\"><pre class=\"language-ctitle=\"consumer 프로세스\"\"><code class=\"language-ctitle=\"consumer 프로세스\"\">item next_consumed;\n\nwhile(true){\n    while (in == out)\n        ; /* do nothing, wait */\n    \n    next_consumed = buffer[out];\n    out = (out + 1) % BUFFER_SIZE;\n\n    /* consume the item in next_consumed */\n}</code></pre></div>\n<ul>\n<li>Shared-memory 방식의 문제점\n<ul>\n<li>프로세스들이 공유하는 메모리 영역에 대한 생성 및 액세스 코드를 어플리케이션 프로그래머들이 explicit하게(명시적으로) 작성해주어야 함.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-ipc-in-message-passing-systems\" style=\"position:relative;\"><a href=\"#6-ipc-in-message-passing-systems\" aria-label=\"6 ipc in message passing systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. IPC in Message-Passing Systems</h2>\n<ul>\n<li>\n<p>Message-Passing</p>\n<ul>\n<li>OS가 cooperating 프로세스들이 메세지를 주고받을 수 있는 수단을 제공</li>\n</ul>\n<ol>\n<li>send(message)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"producer\"\"><pre class=\"language-ctitle=\"producer\"\"><code class=\"language-ctitle=\"producer\"\">message next_produced;\n\nwhile(true){\n    /* produce an item in next_produced */\n\n    send(next_produced)\n}</code></pre></div>\n<ol start=\"2\">\n<li>receive(message)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"consumer\"\"><pre class=\"language-ctitle=\"consumer\"\"><code class=\"language-ctitle=\"consumer\"\">message next_consumed;\n\nwhile(true){\n    receive(next_consumed):\n\n    /* consume the item in next_consumed */\n}</code></pre></div>\n</li>\n<li>\n<p>Communication Links</p>\n<ul>\n<li>프로세스 P와 Q가 communication 시, 서로 메세지를 <code class=\"language-text\">send()</code> &#x26; <code class=\"language-text\">receive()</code></li>\n<li>구현 방식\n<ol>\n<li>direct / indirect\n<ul>\n<li>Direct communication\n<ul>\n<li>각 프로세스들은 메세지를 주고 받을 각 프로세스의 이름을 알고있어야 함</li>\n<li><code class=\"language-text\">send(P, message)</code> / <code class=\"language-text\">receive(Q, message)</code></li>\n<li>이 경우 communiation link가 자동으로 생성됨</li>\n<li>두 프로세스 사이에 1 link만 가능</li>\n</ul>\n</li>\n<li>Indirect communication\n<ul>\n<li>각 프로세는 mailboxs(ports)를 통해 메세지를 주고 받음</li>\n<li><code class=\"language-text\">send(A, message)</code> / <code class=\"language-text\">receive(A, message)</code></li>\n<li>두 개의 프로세스가 shared port를 가지고 있을 때 communication link가 생성됨</li>\n<li>이 link는 두 개 이상의 프로세스가 참여 가능</li>\n<li>두 개의 프로세스 사이에 복수 개의 port로 통신 가능</li>\n<li>이 경우 OS가 제공해야 하는 메커니즘: 1) port를 Create 2) port를 통해 메세지를 Send &#x26; Receive 3) port를 Delete</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>synchronous / asynchronous (blocking / non-blocking)\n<ul>\n<li>synchronous (blocking)\n<ul>\n<li>blocking send: 메세지를 receiver가 수신할 때까지 sender가 block되는 방식</li>\n<li>blocking receive: 이용 가능한 메세지가 전송될 때까지 receiver는 block되는 방식</li>\n</ul>\n</li>\n<li>asynchronous (non-blocking)\n<ul>\n<li>non-blocking send: sender가 메세지를 전송한 뒤, 다른 작업을 계속 이어가는 방식</li>\n<li>non-blocking receiver: reciever가 유뵤한 메세지를 전송받든 null message를 전송받던 작업을 계속 이어가는 방식</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>automatic / explicit buffering</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>정리</strong>: 프로세스 간의 통신은 크게, 1) Shared-memory: 명시적으로 공유된 메모리 공간에 data를 주고 받는 것 2) Message-passing: OS가 메세지의 송수신을 관리. 이 때 OS는 direct/indirec/blocking(sync)/non-blocking(async)으로 메세지 전달 구현 가능</p>\n</blockquote>\n<h2 id=\"7-examples-of-ipc-systems\" style=\"position:relative;\"><a href=\"#7-examples-of-ipc-systems\" aria-label=\"7 examples of ipc systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Examples of IPC Systems</h2>\n<h3 id=\"shared-memory-posix-shared-memory\" style=\"position:relative;\"><a href=\"#shared-memory-posix-shared-memory\" aria-label=\"shared memory posix shared memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shared Memory: POSIX Shared Memory</h3>\n<ul>\n<li>POSIX shared memory: memory-mapped 파일을 이용함 (일반적으로 <code class=\"language-text\">fopen()</code>으로 파일 생성 시에는 HDD에 storage 영역을 잡음)\n<ul>\n<li>memory-mapped 파일을 이용하여 shared memory 구현</li>\n</ul>\n<ol>\n<li>shared-memory object를 Create: <code class=\"language-text\">fd = shm_open(name, O_CREAT | ORDWR, 0666);</code></li>\n<li>object의 size 설정: <code class=\"language-text\">ftruncate(fd, 4096);</code> -> 한 번 읽고, 쓸 때 4096 byte씩 주고 받음</li>\n<li>memory-mapped file 생성: <code class=\"language-text\">mmap(0, SIZE, PROT_READ / PROT_WRITE, MAP_SHARED, fd, 0);</code></li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"posix shared memory 구현 - producer 프로세스\"\"><pre class=\"language-ctitle=\"posix shared memory 구현 - producer 프로세스\"\"><code class=\"language-ctitle=\"posix shared memory 구현 - producer 프로세스\"\">// gcc 3.16_shm_producer.c -lrt\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/shm.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/mman.h&gt;\n\nint main()\n{\n    const int SIZE - 4096;      // the size of shared memory\n    const char *name = &quot;OS&quot;;    // the name of shared memory\n    const char *message_0 = &quot;hello, &quot;;\n    const char *message_1 = &quot;Shared Memory!\\n&quot;;\n\n    int shm_fd;     // the file descriptor of shared memory\n    char *ptr;      // pointer to shared memory\n\n    /* create the shared memory object */\n    shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);\n\n    /* configure the size of the shared memory */\n    ftruncate(shm_fd, SIZE);\n\n    /* map the shared memory object in memory*/\n    ptr = (char *)mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);\n\n    /* write to the shared memory */\n    sprintf(ptr, &quot;%s&quot;, message_0);\n    ptr += strlen(message_0);\n    sprintf(ptr, &quot;%s&quot;, message_1);\n    ptr += strlen(message_1);\n\n    return 0;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"posix shared memory 구현 - connumer 프로세스\"\"><pre class=\"language-ctitle=\"posix shared memory 구현 - connumer 프로세스\"\"><code class=\"language-ctitle=\"posix shared memory 구현 - connumer 프로세스\"\">// gcc 3.16_shm_consumer.c -lrt\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/shm.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/mman.h&gt;\n\nint main()\n{\n    const int SIZE = 4096;      // the size fo the shared memory\n    const char *name = &quot;OS&quot;;    // the name of shared memoroy\n\n    int shm_fd;     // the file descriptor of shared memory\n    char *ptr;      // pointer to shared memory\n\n    /* create the shared memory object */\n    shm_fd = shm_open(name, O_RDONLY, 0666);\n\n    /* map the shared memory object */\n    ptr = (char *)map(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);\n\n    /* read from the shared memory object */\n    prinf(&quot;%s&quot;, (char *)ptr);\n\n    /* remove the shared memory */\n    shm_unlink(name);\n\n    return 0;\n}</code></pre></div>\n<h3 id=\"message-passing-pipes\" style=\"position:relative;\"><a href=\"#message-passing-pipes\" aria-label=\"message passing pipes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Message Passing: Pipes</h3>\n<ul>\n<li>\n<p>Pipe</p>\n<ul>\n<li>초기 UNIX 시스템에서 IPC 메커니즘을 구현하기 위해 사용되었음</li>\n<li>두 프로세스가 commnunicate하기 위한 conduit(통로)로써 역할을 함</li>\n</ul>\n</li>\n<li>\n<p>Pipe 구현 시 4가지 이슈</p>\n<ol>\n<li>unidirectional / bidirectional</li>\n<li>half-duplex / full-duplex</li>\n<li>프로세스 간의 relationship</li>\n<li>network에서 사용할 수 있는가? -> Network에서는 Socket이 사용됨</li>\n</ol>\n</li>\n<li>\n<p>Pipe의 두 가지 Types</p>\n<ul>\n<li>Ordinary Pipes: 외부에서 생성 불가능. parent가 child 프로세스를 만들 때, parent-child 사이에 생성됨</li>\n<li>Named pipe: parent-child 관계 이외의 프로세스에서 사용 가능</li>\n</ul>\n</li>\n<li>\n<p>Ordianry Pipes</p>\n<ul>\n<li><code class=\"language-text\">pipe(int fd[])</code>로 파이프 생성</li>\n<li>방향이 서로 다른 두 개의 파이프(fd[1],fd[0]) 사용</li>\n<li>producer: pipe의 한 쪽 끝에서 write (write end, <code class=\"language-text\">fd[1]</code>)</li>\n<li>Consumer: pipe이 한 쪽 끝에서 read (read end, <code class=\"language-text\">fd[0]</code>)</li>\n</ul>\n<p>-one-way communication이 가능한 unidirectional pipe를 이용해서 two-way communication을 하려면, 2개의 파이프 사용</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ctitle=\"ipc communication with ordinary pipe\"\"><pre class=\"language-ctitle=\"ipc communication with ordinary pipe\"\"><code class=\"language-ctitle=\"ipc communication with ordinary pipe\"\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n\n#define BUFFER_SIZE 25\n#define READ_END 0\n#define WRTIE_END 1\n\nint main()\n{\n    char write_msg[BUFFER_SIZE] = &quot;Greetings&quot;;\n    char read_msg[BUFFER_SIZE];\n    int fd[2];  // read end + write end\n    pid_t pid;\n\n    /* create the pipe */\n    pipe(fd);\n\n    pid = fork();   // fork a neew process\n\n    if(pid &gt; 0){    // parent process\n        close(fd[READ_END]);\n        /* write to the pipe */\n        write(fd[WRITE_END], write_msg, strlen(write_msg)+1);\n        close(fd[WRITE_END);\n    }\n    else if (pid == 0){ // child process\n        close(fd[WRITE_END]);\n        /* read to the pipe */\n        read(fd[READ_END], read_msg, BUFFER_SIZE);\n        printf(&quot;read %s\\n&quot;, read_msg);\n        close(fd[READ_END]);\n    }\n\n    return 0;\n}</code></pre></div>\n<h2 id=\"8-communication-in-client-server-systems\" style=\"position:relative;\"><a href=\"#8-communication-in-client-server-systems\" aria-label=\"8 communication in client server systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Communication in Client-Server Systems</h2>\n<ul>\n<li>Client-Server 시스템에서의 두 가지 strategies</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>Silberschatz et al. “Operating Systems Concepts, 10th Ed.”</li>\n<li><a href=\"https://www.inflearn.com/course/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%B5%EB%A3%A1%EC%B1%85-%EC%A0%84%EA%B3%B5%EA%B0%95%EC%9D%98\">운영체제 공룡책 강의</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-process-concept\">1. Process Concept</a></p>\n</li>\n<li>\n<p><a href=\"#2-process-scheduling\">2. Process Scheduling</a></p>\n</li>\n<li>\n<p><a href=\"#3-operations-on-processes\">3. Operations on Processes</a></p>\n</li>\n<li>\n<p><a href=\"#4-interprocess-communication\">4. Interprocess Communication</a></p>\n</li>\n<li>\n<p><a href=\"#5-ipc-in-shared-memory-systems\">5. IPC in Shared-Memory Systems</a></p>\n</li>\n<li>\n<p><a href=\"#6-ipc-in-message-passing-systems\">6. IPC in Message-Passing Systems</a></p>\n</li>\n<li>\n<p><a href=\"#7-examples-of-ipc-systems\">7. Examples of IPC Systems</a></p>\n<ul>\n<li><a href=\"#shared-memory-posix-shared-memory\">Shared Memory: POSIX Shared Memory</a></li>\n<li><a href=\"#message-passing-pipes\">Message Passing: Pipes</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#8-communication-in-client-server-systems\">8. Communication in Client-Server Systems</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 23, 2022","title":"TIL - Operating System Concept, Processes","categories":"TIL Linux","author":"Mini","emoji":"🦖"},"fields":{"slug":"/TIL/OS2/"}},"site":{"siteMetadata":{"siteUrl":"https://sominsong.github.io","comments":{"utterances":{"repo":"sominsong/sominsong.github.io"}}}}},"pageContext":{"slug":"/English/Speak_day08/","nextSlug":"/English/Cambly_221220/","prevSlug":"/TIL/OS2/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}