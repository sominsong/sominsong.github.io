{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"261b368e-3830-5c7f-8577-bf482b635475","excerpt":"1. Process Concept 프로세스란? 실행 중인 프로그램 OS에서 작업의 단위 프로세스는 작업(task)를 위해 아래의 리소스를 필요로 함 CPU time memory files I/O devices 따라서, OS의 가장 기본적인 일은 ‘프로세스를 관리’하는 작업 프로세스 메모리 section Text section: 실행 코드 Data section: 전역 변수 Heap sectiom: 프로그램이 실행하는 동안 동적으로 할당하는 메모리 (e.g. malloc) Stack section: 함수 호출 시 임시 데이터 저장소 (함수 파라미터, return 주소값, 지역변수) 소스 코드 -(컴파일)-> 프로그램 (a.out) -(메모리 로드)-> 프로세스 프로세스의 생명 주기(state) New: 프로세스가 생성된 상태 Running: CPU를 프로세스가 점유(scheduler dispatch)하어, 프로세스의 명령어가 CPU에 fetch되어 실행되는 상태 Waiting: 이벤…","frontmatter":{"categories":"TIL Linux","title":"TIL - Operating System Concept, Processes","date":"December 23, 2022"},"fields":{"slug":"/TIL/OS2/"}}},{"node":{"id":"f5abddb8-f796-582e-a07d-747de914cec9","excerpt":"Aim to We should aim + [to 부정사] To + V to grow our user base to increase our production to branch out internationally to increase our revenue to cut down production costs by 20% to launch new content by April Short/Long term goal Our short term goal is to increase user satisfaction by 30% Our long term goal is to double the number of subscribers. Our long term goal is to cut down production costs by 20% To that end To that end, we need all hands on deck To that end, we need more engineers. Aim …","frontmatter":{"categories":"Engilsh","title":"Speak Day08 - 목표 달성을 위해서, 전사적인 노력이 필요합니다.","date":"December 21, 2022"},"fields":{"slug":"/English/Speak_day08/"}}},{"node":{"id":"d3c70a4d-4729-58c3-8144-aba444871dab","excerpt":"몰랐던 표현 What are you having? : (카페에서) 무엇을 마시고 있니? / 먹고 있니? What brings you to me? : 어쩐 일로 오셨나요? What caused you to be interested in that? / What made you interested in that? : 그것에 관심을 가지게 된 계기는 무엇인가요? “What made you interested in that” 과 “What made you be interested in that”의 차이점 Are you used to working remotely? (-> custom, 관습) : 원격 근문에 익숙한가요? I used to live in another country (-> action finished in the past) : 나는 다른 나라에서 살았었습니다. “I used to live in another county”와 “I libed in another country”의…","frontmatter":{"categories":"English","title":"Cambly - Business English Class with Stuart on December 20th","date":"December 20, 2022"},"fields":{"slug":"/English/Cambly_221220/"}}},{"node":{"id":"4160a8ff-a7e8-59d4-9df1-77ab81bde24c","excerpt":"Since everyone is here, let’s get started The goal of this presentation + [to 부정사] The goal of this presentation is to discuss our marketing plans. to + V to outline our marketing strategy to discuss some updates for our payment system to discuss out budget First / Then / After that / Finally First, I’ll talk about last week’s updates Then, I’ll talk about the budget for Q2 After that, I’ll talk about future investment opportunities Since everyone is here, let’s get started The goal of this pre…","frontmatter":{"categories":"Engilsh","title":"Speak Day07 - 발표의 취지는 마케팅 전략을 간략하게 설명드리는 겁니다","date":"December 20, 2022"},"fields":{"slug":"/English/Speak_day07/"}}},{"node":{"id":"88197932-84df-5762-89e4-9868f7c28d24","excerpt":"Wrap up Before we wrap up, what are the next steps? Before we wrap up, does anyone have any questions or comments? have + 사람 + 동사 I’ll have Andy liik into the issue I’ll have Alice write up a report I’ll have Max look into it and get back to you That’s all That’s all from my end That’s all for today That’s all for this meeting Wrap up have + 사람 + 동사 That’s all","frontmatter":{"categories":"Engilsh","title":"Speak Day05 - 회의 마무리하기 전에, 다음으로 할 일이 뭐죠?","date":"December 18, 2022"},"fields":{"slug":"/English/Speak_day05/"}}},{"node":{"id":"47477823-02ec-530e-9458-1f9b7f53f92f","excerpt":"for your reference I forwarded the email for your reference I compiled the data for your reference I printed out the notes for your reference I cc’ed you the email for your reference write up I wrote up an agenda for our meeting I wrote up this doc for the presentation I wrote up my ideas for the brainstorm Could you look over? Could you review the agenda ahead of time? Could you look over the doc ahead of time? 보다 review: 아주 자세하게 검토하다 look at: 일반적으로 그냥 보다 look over: 가볍게 훑어보다 for your reference…","frontmatter":{"categories":"Engilsh","title":"Speak Day04 - 참고하시라고 이메일을 포워드 해드렸어요","date":"December 17, 2022"},"fields":{"slug":"/English/Speak_day04/"}}},{"node":{"id":"f2891ba0-d828-5d68-bb95-2846655e442f","excerpt":"Get sidetracked We are getting a bit sidetracked here I’m getting a bit sidetracked here Focus on Let’s focus on the topic of overseas markets Let’s focus on the issue at hand Let’s focus on the most urgent priorities Save that for next time Let’s save that for next time Let’s save that for the next meeing Get sidetracked Focus on Save that for next time","frontmatter":{"categories":"Engilsh","title":"Speak Day03 - 지금 우리가 본론에서 좀 벗어나고 있어요","date":"December 16, 2022"},"fields":{"slug":"/English/Speak_day03/"}}},{"node":{"id":"738f8cb2-4630-5a8c-8f5a-62cbfd46c2f1","excerpt":"Running over Sorry, my meeting is running over. Should be done in + 시간 We should be done in about 10 minutes. Push back + by 시간 Can we push the meeting back by 10 minutes? Would you mind if we push _ to _? Would you mind if we push the meeting to next week? Would you mind if we push the meeting to some other time? Running over Should be done in + 시간 Push back + by 시간 Would you mind if we push _ to _?","frontmatter":{"categories":"Engilsh","title":"Speak Day02 - 앞에 회의가 좀 늦어지고 있어요","date":"December 15, 2022"},"fields":{"slug":"/English/Speak_day02/"}}},{"node":{"id":"bb8b70b5-eb09-50a2-8b69-354037169242","excerpt":"1. What Operating Systems Do 2. Computer-System Organization 3. Computer-System Architecture 4. Operating-System Operations 5. Resource Management 6. Security and Protection 7. Virtualization 8. Distributed Systems 9. Kernel Data Structures 10. Computing Environments 11. Free and Open-Source Operating Systems Reference Silberschatz et al. “Operating Systems Concepts, 10th Ed.” 운영체제 공룡책 강의 1. What Operating Systems Do 2. Computer-System Organization 3. Computer-System Architecture 4. Operating-S…","frontmatter":{"categories":"TIL Linux","title":"TIL - Operating System Concept, Introduction","date":"December 15, 2022"},"fields":{"slug":"/TIL/OS1/"}}},{"node":{"id":"b2aaac22-3831-5aae-9717-51bc177321b5","excerpt":"have issues with ~ “I’m having issues with the internet connection.” “I’m having some noise in the background.” “I’m hearing an echo in the background.” I’m going to ~ “So, I’m going to turn off my video.” “So, I’m going to mute myself.” “So, I’m going to turn on my audio.” cuts in and out “Your sound/video cuts in and out.” have issues with ~ I’m going to ~ cuts in and out","frontmatter":{"categories":"Engilsh","title":"Speak Day01 - 목소리가 나왔다 안나왔다 끊겨요","date":"December 14, 2022"},"fields":{"slug":"/English/Speak_day01/"}}},{"node":{"id":"37cd52dc-6a02-569b-a1cb-f398f4ac2684","excerpt":"학부생 때 컴퓨터 구조, 운영 체제 과목을 열심히 들었지만\n석사 과정에서 시스템을 연구하다보면 개념적인 부분에서 막히는 부분들이 있었다. 운영 체제의 바이블이라고 할 수 있는 Operating Systems Concepts 책을 완독하는 것이\n졸업 후 하고 싶었던 to do list 중에 하나였는데,\n이번 기회에 인프런 강의와 함께 책을 정독하며 OS에 대한 개념을 정리해두고자 한다. 1. Overview Introduction …(계속)… 2. Process Management 3. Process Synchronization 4. Memory Management 5. Storage Management 6. File System 7. Security and Protection 8. Advanced Topics 9. Case Studies Reference Silberschatz et al. “Operating Systems Concepts, 10th Ed.” 운영체제 공룡책 강의 …","frontmatter":{"categories":"TIL Linux","title":"TIL - Operating System Concept","date":"December 14, 2022"},"fields":{"slug":"/TIL/OS/"}}},{"node":{"id":"48b37a6d-b2a3-5d7e-8092-126984e41dc3","excerpt":"약 한 달여간 후부터 있을 Cisco 근무를 위해서 영어 연습을 열심히 해야겠다는 필요성을 강력히 느꼈다. 그래서 필자는 Speak과 Cambly를 결제하였는데,\n배웠던 표현들을 연습할 수 있도록 여기에 정리해두려고 한다. 약 한 달여간 사용해보고 두 서비스의 후기도 간단하게 남길 예정이다. 우선, Speak의 경우는 주로 Business English에 대해 연습할 것 같고,\nCambly를 이용해서는 Business English 이외에도 Presenting Academic Research 표현들에 대해 연습할 계획이다. 1. Speak Business (실무 영어) Day00 - 면담 일정을 잡는 게 좋겠어요 Business (실무 영어) Day01 - 목소리가 나왔다 안나왔다 끊겨요 Business (실무 영어) Day02 - 앞에 회의가 좀 늦어지고 있어요 Business (실무 영어) Day03 - 지금 우리가 본론에서 좀 벗어나고 있어요 Business (실무 영어) D…","frontmatter":{"categories":"Engilsh","title":"Business English","date":"December 13, 2022"},"fields":{"slug":"/English/Business_English/"}}},{"node":{"id":"e25cf218-c7f7-557e-b453-176723145349","excerpt":"We should schedule ~ “We should schedule a meeting to ~” Meetings brainstorming Meeting 1 on 1 meeting Kick-off meeting brief meeting standing meeting weekly meeting biweekily meeing to do to discuss the timeline to go over your annual review to discuss strategies/ideas to discuss the project to talk about it Would you be available for an hour? “Would you be available for 10 minutes to ~?” to do to go over the test results to talk about the new design What’s your availability? “What’s your avai…","frontmatter":{"categories":"Engilsh","title":"Speak Day00 - 면담 일정을 잡는 게 좋겠어요","date":"December 13, 2022"},"fields":{"slug":"/English/Speak_day00/"}}},{"node":{"id":"cfe5ec05-656a-587a-806e-590133afe098","excerpt":"11월 18일 금요일 아침에 Cisco 인터뷰를 진행했다. 결론부터 말하자면, 약 3주 뒤 최종 합격 통보를 받았고 2023년 1월부터 근무를 하게되었다.\n원래라면 실리콘밸리에 직접 가서 근무를 할 예정이었지만, 비자 관련 문제로 원격 근무를 하게되었다. 🥲🥲 인터뷰 내용에 대해 정리하자면, 이전 포스팅에서도 잠깐 언급했던 것처럼 Offer를 받고 인터뷰를 진행한 상태이기 때문에 기존에 조사했던 인터뷰와는 조금 달랐다. 총 1시간동안 인터뷰가 진행되었으며, 모든 인터뷰는 영어로 진행되었다. 인터뷰 질문 내용을 요약하자면 다음과 같다. Tell me about yourself (2 min) CS Background Question (20-30min) Live Coding Interview (20-30min) Tell me about your research (5min) Do you have any question? (5min) 그럼 아래에서 각 카테고리에 대해 어떤 질문을 했는지 자…","frontmatter":{"categories":"Interview","title":"Cisco Research Interview Review - Intership Program","date":"November 20, 2022"},"fields":{"slug":"/Interview/CISCO-Interview/"}}},{"node":{"id":"add13c2c-b16a-5151-8f28-7ead53298f8f","excerpt":"참고해서 코드 작성해보기\nhttps://insalat.tistory.com/35 https://roadtosuccess.tistory.com/39 Reference https://mangkyu.tistory.com/87 Reference","frontmatter":{"categories":"TIL Linux","title":"TIL - LLVM IR","date":"November 18, 2022"},"fields":{"slug":"/TIL/LLVM_IR/"}}},{"node":{"id":"6c843c45-d560-5a91-867a-5631eb525e4c","excerpt":"Reference https://mangkyu.tistory.com/87 Reference","frontmatter":{"categories":"TIL Linux","title":"TIL - Virtualization","date":"November 17, 2022"},"fields":{"slug":"/TIL/Virtualization/"}}},{"node":{"id":"7693020f-a73f-5ab9-9144-05687ca77cc5","excerpt":"0. 들어가기 전에 아직 면접 경험이 별로 없지만, 면접 기회가 생길 때마다 질문으로 나올 만한 CS 개념들을 정리해두면\n앞으로의 면접에서도 많은 도움을 받을 수 있지 않을까해서 정리해둔다. 참고로, 아래에는 일반적인 CS 개념들도 포함되어 있지만\n일부는 내가 석사 과정동안 진행했던 연구들에 대한 개념들도 함께 들어있다. 석사 과정동안 진행했던 연구의 키워드들은 조금 깊게,\n그리고 그 이외의 CS 키워드들은 좀 더 얕게 정리할 계획이다. 참고로 면접에서는 장황하게 말하는 것보다, 키워드를 담은 한 문장으로 설명하는 것이 중요하더라.\n그래서 최대한 키워드를 담은 한 문장을 통해 개념을 설명하고, 추가 질문에 대비한 답변들도 정리해 둘 계획이다. 지금 당장은 외국 기업 면접을 앞두고 있는터라, 영어로도 함께 정리해 둘 계획이다. 큰 카테고리로 나누어서 개념들을 정리해두었다. Common CS Interview 1. OS ‘Operating System’이라는 용어를 일반인에게 설명 짧…","frontmatter":{"categories":"Interview","title":"CS 면접 대비","date":"November 16, 2022"},"fields":{"slug":"/Interview/CS_Interview/"}}},{"node":{"id":"8c9766f2-c436-516c-87d7-6ca50cda89e9","excerpt":"가장 짧은 경로를 찾는 알고리즘 최단 경로 알고리즘이 사용될 수 있는 다양한 문제 상황 한 지점에서 다른 한 지점까지의 최단 경로 한 지점에서 다른 모든 지점까지의 최단 경로 모든 지점에서 다른 모든 지점까지의 최단 경로 Dynamic Programming 문제로 분류되기도 함 1. Dijkstra Shortest Path 알고리즘 특정한 한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로 계산 조건: 음수 Edge가 없을 때 (현실 세계의 도로) Greedy 알고리즘으로 분류: 매 상황에서 가장 비용이 적은 Node를 선택 💡 알고리즘 동작 과정 출발 노드 설정 최단 거리 테이블 초기화 (모든 노드까지의 거리 무한으로 설정 & 자기 자신까지의 거리는 0으로 설정) 최단 거리 테이블: 각 노드에 대한 현재끼ㅏ지의 최단 거리 정보 저장 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신 위 과정에…","frontmatter":{"categories":"Algorithm","title":"Shortest Path 알고리즘 정리","date":"November 09, 2022"},"fields":{"slug":"/Algorithm/Shortest_Path/"}}},{"node":{"id":"d1fef546-5d83-5ae7-bf87-4b75aafd193e","excerpt":"1. Disjoint Sets (서로소 집합) 자료구조 서로소: ‘공통 원소가 없는 두 집합’ 의미 서로소 집합 자료구조: 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조 서로소 집합 자료구조(= Union Find 자료구조)의 연산 Union(합집합) Find(찾기): 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산 서로소 집합 자료구조 동작 과정 Union 연산 확인 -> 서로 연결된 두 노드 A, B 확인 A와 B의 루트 노드 A’, B’를 각각 찾음 A’를 B’의 부모 노드로 설정 모든 Union 연산을 처리할 때까지 1번 과정 반복 서로소 집합 자료구조의 연결성 기본적인 형태로 서로소 집합 자료구조에서는 root 노드에 즉시 접근할 수 없음\n-> root 노드를 찾기 위해 부모 테이블을 계속해서 확인하며 거슬러 올라가야 함  기본적인 구현 방법 ‘기본적인 구현 방법’의 문제점 Union 연산이 편향되게 이루어지는 경우 Find 함수가 비효율적…","frontmatter":{"categories":"Algorithm","title":"Graph 알고리즘 정리","date":"November 08, 2022"},"fields":{"slug":"/Algorithm/Graph/"}}},{"node":{"id":"f3762fa5-29bd-524c-9de4-5c98b3099907","excerpt":"1. Priority Queue (우선순위 큐) & Heap (힙) Priority Queue: 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조 데이터를 우선순위에 따라 처리하고 싶을 때 사용함 Priority Queue 구현 방법 List 이용: 차례로 데이터 삽입 & 꺼낼 때 우선 순위 비교해서 높은 것부터 꺼냄 Heap 이용 데이터 개수가 N일 때, 구현 방식에 따른 시간 복잡도 우선순위 큐 구현 방식 삽입 시간 삭제 시간 List O(1) O(N) Heap O(logN) O(logN) 단순히 데이터를 Heap에 넣었다가 모두 꺼내는 작업 = 정렬 작업 ‘힙 정렬’이라고 함 시간 복잡도: O(NlogN) Heap의 특징 Heap은 Complete Binary Tree(완전 이진 트리)의 일종 항상 Root node를 제거함 Min Heap (최소 힙) root 노드가 가장 작은 값을 가짐 값이 작은 데이터가 우선적으로 제거됨 Max Heap (최대 힙) root 노…","frontmatter":{"categories":"Algorithm","title":"자료구조 정리","date":"November 07, 2022"},"fields":{"slug":"/Data_Structure/"}}},{"node":{"id":"29c46c26-f92c-5cc3-8977-87d9220073c5","excerpt":"졸업 후, 취준을 하며 여느 졸업생(취준생)들과 비슷한 시간을 보내고 있었다.\n그러던 중, 지도 교수님과 논문 관련해서 상담을 하게되었다. 교수님께서는 미국 박사 유학을 적극 추천해주셨고,\n이제까지는 ‘내 일이 아니다’라며 생각했던 진로에 대해 진지하게 고민해보게 되었다. 현실적으로 지금은 박사 유학을 위한 준비가 아무것도 되어있지 않다보니,\n내년 가을에 Application을 넣고, 2024년 9월 입학을 고려해야 한다. (28살에 박사 입학) 그러기 위해선 내년(2023년) 이 맘때쯤 전까지 준비가 완료되어있어야하기 때문에\n어떤 준비가 필요한지에 대해 찾아보고 정리해두려고 한다. 0. 국내 해외 대학원 유학 장학금 삼성 이건희 장학금 관청 이종환 장학금 국비 유학생 선발 파견 장학금 한국 고등교육재단 장학금 1. 준비해야 할 것 학교마다 다르겠지만, 보통의 학교 입학을 위해 준비해야하는 것들은 아래와 같다. 필수 사항 학사 학위 / High GPA (최소 3.0/4.0, 3.9…","frontmatter":{"categories":"PhD","title":"미국 박사 유학","date":"November 06, 2022"},"fields":{"slug":"/PhD in US/"}}},{"node":{"id":"2a1351ad-7205-5434-9b1a-bb923782cbc1","excerpt":"0. Dynamic Programming 다이나믹 프로그래밍(=동적 계획법)은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함 다이나믹 프로그래밍의 구현: Top-Down (하향식) / Bottom-Up (상향식) Top-Down (하향식): Memorization 구현 Memorization 구현이란? 한 번 계산한 결과를 메모리 공간()에 메모하는 기법 (**Caching) 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴  Bottom-Up (상향식): 반복문 구현 “일반적인 프로그래밍 분애에서의 Dynamic이란 어떤 의미? 자료 구조에서 Dynamic Allocation은 **‘프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법’**을 의미 반면, Dynamic Programming에서 ‘Dynamic’은 별다른 의미 없이 사용된 단어 다이나믹…","frontmatter":{"categories":"Algorithm","title":"Dynamic Programming 알고리즘 정리","date":"November 06, 2022"},"fields":{"slug":"/Algorithm/Dynamic_Programming/"}}},{"node":{"id":"fdb21097-f512-5f3a-bffb-5b76b90223df","excerpt":"순차 탐색 (Sequential Search): 리스트 안에 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법 이진 탐색 (Binary Search): 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정함 시간 복잡도: O(logN) -> 단계마다 탐색 범위를 2로 나누는 것과 동일(탐색 범위를 절반씩 줄임)함므로 연산 횟수는 logN에 비례 파이썬 이진 탐색 라이브러리  : 정렬된 순서를 유지하면서 배열 에 를 삽입할 가장 왼쪽 인덱스 반환 : 정렬된 순서를 유지하면서 배열 에 를 삽입할 가장 오른쪽 인덱스 반환 값이 특정 범위에 속하는 데이터 개수 구하기 파라메트릭 서치 (Parametric Search) 최적화 문제를 결정 문제 (yes or no)로 바꾸어 해결하는 기법 e.g, 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제 일반적으로 코딩 테스트에…","frontmatter":{"categories":"Algorithm","title":"Binary Search 알고리즘 정리","date":"November 05, 2022"},"fields":{"slug":"/Algorithm/Binary_Search/"}}},{"node":{"id":"3d865a3a-a15e-5d57-916b-450dfa7c948a","excerpt":"정렬: 데이터를 틁정한 기준에 따라 순서대로 나열하는 것 일반적으로 문제 상황에 따라 적절한 정렬 알고리즘이 공식처럼 사용됨 0. 정렬 알고리즘 비교하기 정렬 알고리즘 평균 시간 복잡도 공간 복잡도 특징 Selection Sort O(N^2) O(N) 아이디어 매우 간단 Insertion Sort O(N^2) O(N) 데이터가 거의 정렬되어 있을 때, 가장 빠름 Quick Sort O(NlogN) O(N) 대부분의 경우 가장 적합, 충분히 빠름 Counting Sort O(N+K) O(N+K) 데이터의 크기가 한정되어 있는 경우에만 사용 가능, 매우 빠름 1. 선택 정렬 (Selection Sort) 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복 시간 복잡도: N번만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다 전체 연산 횟수: 등차수열 N + (N-1) + (N-2) + … + 2 => (N^2 + N -2)/2 => O(N^…","frontmatter":{"categories":"Algorithm","title":"Sorting 알고리즘 정리","date":"November 04, 2022"},"fields":{"slug":"/Algorithm/Sorting/"}}},{"node":{"id":"7689f5dc-91fd-5c36-9e18-038c7e226e5e","excerpt":"대표적인 그래프 탐색 알고리즘 Search란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미 필수 자료구조 Stack: 선입 후출 (FILO) insert(), delete()로 동작 구성 cf) 리스트 최상단 원소부터 출력 () Queue: 선입 선출 (FIFO) deque 라이브러리 사용: ,  insert(), delete()로 동작 구성 cf) 나중에 들어온 원소부터 출력 () 필수 개념 Recursive Function: 자기 자식을 다시 호출하는 함수 컴퓨터 메모리 내부의 Stack 프레임에 함수 호출이 쌓이는 방식으로 작동함 DFS에 이용됨 예시 문제: 팩토리얼 구현 문제 예시 문제: 유클리드 호제법 (Euclidean Algorithm, 최대공약수 계산) 문제 유클리드 호제법 두 자연수 A,B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 한다. 이 때, A와 B의 최대공약수는 B와 R의 최대공약수와 같다. 1. DFS DFS (Depth-First…","frontmatter":{"categories":"Algorithm","title":"DFS BFS 알고리즘 정리","date":"November 03, 2022"},"fields":{"slug":"/Algorithm/DFS_BFS/"}}},{"node":{"id":"20a049a8-b679-5821-bcab-18100a313358","excerpt":"Greedy Algorithm 현재 상황에서 지금 당장 좋은 것만 고르는 방법 일반적으로 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구 Greedy Solution은 정당성이 중요 = 단순히 현재 상황에서 가장 좋은 것을 반복적으로 선택하는 것만으로도 최적의 해를 구할 수 있는지? 보장해야 함 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다. 하지만, 코테의 경우는 출제자가 그리디로 얻은 해가 최적의 해가 되는 특수한 상황을 제시하기 때문에 예외다. 예시 문제: 거스름돈 문제 정당성 분석: 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는? 가지고 있는 동전 중에서 ”큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문” 만약 800원을 거슬러주어야 하는데 화폐 단위가 500원, 400원, 100원일 경우는 해당하지 않음 답안 예시 시간 복잡도 분석 금액 자체와는 무관…","frontmatter":{"categories":"Algorithm","title":"Greedy 알고리즘 정리","date":"November 02, 2022"},"fields":{"slug":"/Algorithm/Greedy/"}}},{"node":{"id":"4ef79b05-73be-5417-a6c3-8a5c57d1e61f","excerpt":"좋은 기회로 Cisco Research 본사에서 Intership Program Offer를 받았다. Resume는 제공한 상태이지만, 앞으로의 프로세스에서 어떻게 인터뷰가 진행될지 자세한 안내가 없었기 때문에 남은 기간동안 무엇을 준비해야 하는지 굉장히 막막했다.\n특히, 외국계 기업인데다가 Research이며, Intership Program이기 때문에 어떻게 인터뷰 과정이 진행되는지 대체 감이 오질 않았다. 따라서 구글링을 통해 Cisco Interview를 준비하면서 참고하면 좋을만한 것들을 정리해두기로 했다. 참고로 Offer를 주신 분께서는 Coding Test와 1 시간 가량의 Interview 프로세스가 있을 것이라고 안내해주셨다. Cisco 채용 페이지에서 Security 관련 Internship Program을 찾아보니 다음 포지션이 제일 관련도가 높아 보였다: Security Research Engineer (Intern) United States Cisco In…","frontmatter":{"categories":"Interview","title":"Cisco Research Interview - Intership Program","date":"November 01, 2022"},"fields":{"slug":"/Interview/CISCO-interview-preparation/"}}},{"node":{"id":"a9977189-a1ed-5373-ba31-2ff2dafcbe8a","excerpt":"네트워킹 외부에서 BPF VM을 사용한 첫 번째 사례는  시스템콜에 대한 액세스 제어 정책을 구현하는 것이었다.","frontmatter":{"categories":"TIL Linux","title":"TIL - Seccomp-BPF","date":"November 01, 2022"},"fields":{"slug":"/TIL/Seccomp-BPF/"}}},{"node":{"id":"02e027c1-d496-5c9c-9e98-911926779f57","excerpt":"알고리즘 사이트 백준 유형별 단계별로 정리되어 있는 곳 프로그래머스 코드포스 알고리즘 순서 그리디(Greedy) 알고리즘 탐색(Search) 알고리즘 - 완전 탐색, BFS, DFS 기본 동적 프로그래밍 그래프 이론 문자열 고급 동적 프로그래밍 유용 Python 라이브러리 : 반복 데이터 처리 / 순열과 조합 / 완전 탐색 알고리즘 : 우선순위 큐 / Dijkstra Algorithm와 같은 최단 경로 알고리즘 : Binary Search : deque, counter 자료구조 포함 : 수학 기능 알고리즘 개념 정리 0. Complexity Timte Complexity: 특정 크기 입력에 대한 수행 시간 Space Complexity: 특정 크기 입력에 대한 메모리 사용량 Big-O Notation 가장 빠르게 증가하는 항만을 고려하는 표기법 함수의 상한을 나타냄 3N^3 + 5N^2 + 1,000,000 -> O(N^3) 시간 복잡도 비교 O(1) Constant time (상…","frontmatter":{"categories":"Algorithm","title":"알고리즘 공부 순서 정리 및 사이트 정리","date":"November 01, 2022"},"fields":{"slug":"/Algorithm/Algorithm/"}}},{"node":{"id":"e1001a6b-923f-5548-9647-b2fc6f9d5a2a","excerpt":"석사 과정동안 진행했던 과제에서 BPF-LSM 기술을 사용하여 컨테이너 환경을 위한 보안 모듈을 개발한 적이 있다.\n이번 기회에 관련된 내용들을 복습하고, 또 정리해두면 좋을 것 같았다. 0. BPF-LSM 기술이란 BPF-LSM 기술을 한 마디로 정리하자면 다음과 같다. Privileged User가 MAC(Mandatory Access Control) 및 Audit 정책을 구현하기 위해 BPF 프로그램을 LSM Hook에 연결하여 시스템을 런타임 계측(Runtime Instrumentation)하는 보안 모듈 즉, BPF-LSM이란 기술을 이해하기 위해선 MAC, BPF, LSM에 대한 개념이 선행되어야 한다.\n따라서 BPF-LSM을 본격적으로 정리하기에 앞서, 관련 기술들을 먼저 하나씩 정리해보았다. 정리된 글들은 다음에서 확인할 수 있다. eBPF BCC LSM BPF-LSM 기술을 알기 위해서는 KSRI 기술을 먼저 이해해야 한다.\nKRSI는 BPF-LSM이 커널 메인스트…","frontmatter":{"categories":"TIL Linux","title":"TIL - BPF-LSM","date":"October 31, 2022"},"fields":{"slug":"/TIL/BPF-LSM/"}}},{"node":{"id":"253a49d1-f542-5c84-ac3c-9a457447a3f5","excerpt":"BCC는 커널 tracing이나 manipulation 프로그램을 만들기 위한 유용한 toolkit을 제공하는 오픈 소스이다. 맨처음 eBPF 프로그램을 작성하기 시작한다면, 어려워하는 부분이 바로 eBPF 프로그램을 컴파일하고 커널 소스코드에서 eBPF 라이브러리를 연결하는 부분일 것이다.\n이러한 부분을 해결해주기 위해 등장한 Toolkit이 BCC라고 보면 된다. 즉, BCC는 eBPF 프로그램 작성, 컴파일 및 로드를 위한 Toolchain을 제공하고, 뿐만 아니라 performance issue 디버깅 및 진단을 위한 여러 가지 예제 프로그램과 도구도 제공한다. 2015년 4월 출시 이후 많은 개발자에 의해 BCC가 발전했으며, 수많은 예제 코드와 함께 즉시 사용 가능한 tracing tool이 제작되었다. 예를 들어, garbage collection 이벤트 추적, method call과 system call 추적, 스레드 생성 및 소멸 추적을 위해 작성된 USDT(Use…","frontmatter":{"categories":"TIL Linux","title":"TIL - BCC (eBPF Compiler Collection)","date":"October 27, 2022"},"fields":{"slug":"/TIL/BCC/"}}},{"node":{"id":"11af0ade-450d-5233-9d26-6d8f04f5e213","excerpt":"정보 보안의 3요소 Confidentiality(기밀성): asset이 authorization(인가)된 user에 의해서만 접근하는 것을 보장하는 것 (e.g., 비밀 일기) 일기장을 남이 훔쳐보기 못하도록 지키는 것 = 기밀성을 지키는 것. 남이 훔쳐보더라도 무슨 말인지 못알아보게 적는 것 = 기밀성을 지키기 위해 암호화하는 것. Threat list: 도청, 도난, 사회공학 (shouler surfing) 등 Integrity(무결성): asset이 authorization된 user에 의해서, authorization된 방법으로만 변경 가능한 것 일기가 다른 사람에 의해 일부 수정된다 = 무결성이 꺠진 것. 무결성 검증을 위해서는 Hash 값을 비교함. Threat list: 트로이 목마, 바이러스 Availability(가용성): asset이 적절한 시간에 authorization된 user가 접근할 수 있는 것 DB를 Active/Standby로 구성하는 것 Threat…","frontmatter":{"categories":"TIL Security","title":"TIL - 정보 보안의 3요소","date":"October 26, 2022"},"fields":{"slug":"/TIL/Security_3/"}}},{"node":{"id":"f1965be8-e3a2-59b7-8c4c-d182696439d2","excerpt":"0. LSM (Linux Security Module) Linux Security Module(LSM) 프레임워크는 Security Module을 지원하는 커널 프레임워크를 제공한다.\n특히, LSM은 리눅스에서 MAC(Mandatory Access Control; 강제 접근 제어)을 구현하는데 중점을 두고 있지만, 향후에는 샌드박싱과 같은 다른 보안 요구 사항을 해결할 수 있다. LSM 프레임워크 그 자체로는 추가적인 보안 기능을 제공하지는 않는다. 다만, Security Module을 지원하기 위한 인프라를 제공할 뿐이다.\nLSM은 매번 커널 소스 코드를 구정할 필요 없이 MAC을 구현하기 위한 필수적인 컴포넌트들을 제공한다.\n이러한 LSM을 활용하면 application whitelist를 쉽고 편리하게 구현할 수 있다. LSM 프레임워크는 리눅스 커널 곳곳에 Hook을 넣어 커널에서 발생하는 여러 민감한 동작 부분에서 Hook을 Security Module에게 제공하고,\n해당…","frontmatter":{"categories":"TIL Linux","title":"TIL - LSM(Linux Security Module)","date":"October 26, 2022"},"fields":{"slug":"/TIL/LSM/"}}},{"node":{"id":"0de738e2-7ce9-5de4-a3d4-53c76eb7ebec","excerpt":"TL;DR Problem Mac OS를 업데이트 후, 평소와 같이 TIL Git Blog를 적다가 commit하려고 했더니 다음과 같은 error가 발생함. error log는 다음과 같음. 원인은 MacOS Update 이후에 CommandLineTools를 식별하기 못하여 발생함 Solution  command로 CommandLineTools(command line developer tools)를 설치하면 문제 해결 완료 시, 다음과 같이 성공적으로 작동","frontmatter":{"categories":"Error Mac","title":"Error - Mac 업그레이드 후 xcrun error 해결","date":"October 25, 2022"},"fields":{"slug":"/Error/xcrun_error/"}}},{"node":{"id":"693ff1c3-0f14-5fd7-8852-fb00a39ed129","excerpt":"리눅스 커널에 대해 공부한다면, eBPF에 대해 한 번쯤은 들어봤을 것이다.\n필자가 주로 연구했던 분야인 Seccomp도 BPF 기술을 이용하는 리눅스 커널의 보안 모듈이다.\n따라서 석사 과정동안 공부했던 내용들을 기록하기 위해서는 가장 먼저 BPF에 대한 정리가 필요할 것 같아, 이렇게 기록하고자 한다. 0. BPF BPF란 Berkeley Packet Filter의 약자이다(였다).\n이 개념은 1992년 Steve McCane과 Van Jacobson의 Usenix Conference Winter ‘93 논문 “The BSD Packet Filter: A New Architecture for User-level Packet Capture”에서 처음으로 소개되었다.\n커널과 같은 Privileged context에서 sandboxed program을 실행할 수 있는 기술이다.\n즉, 커널 내부에 사용자가 작성한 코드를 삽입하여 안전하게 실행시킬 수 있는 도구이며, 커널 모듈이 아닌 …","frontmatter":{"categories":"TIL Linux","title":"TIL - eBPF","date":"October 24, 2022"},"fields":{"slug":"/TIL/eBPF/"}}},{"node":{"id":"b84b41f9-05f8-5a6c-9d97-6db44084c1fa","excerpt":"졸업하고 첫 이력서를 냈던 곳이 바로 AWS Korea이다. 국내 기업과 달리 AWS 같은 경우 외국계 기업이기도 했고 채용 프로세스도 특이한 점이 많았다.\n그래서 인터뷰를 준비할 때 여러 가지 어려운 점들이 많았는데, 다행히 여러 분들의 블로그 포스팅을 보머 인터뷰 과정에 많은 도움을 받을 수 있었다. 그동안 AWS 인터뷰를 준비하면서 여러 가지 경험했던 것들을 공유하고자 글을 남긴다. 이 글을 보는 당신께도 좋은 결과가 있길 바라며! 0. AWS의 채용 프로세스 본격적으로 경험담을 공유하기에 앞서, AWS의 채용 프로세스에 대해 간략하게 소개하고 들어가겠다.\n이 부분의 경우, 각 포지션마다 프로세스가 상이할 수 있으니 다른 포지션일 경우 내용을 선별해서 참고해야 한다.\n필자의 경우, Associate Solutions Architect 포지션에 지원했다. 각 인터뷰이에게는 채용 담당자분들이 채용 프로세스를 스케쥴링해주시는데, 이분들께 문의하면 각 포지션에 대한 채용 프로세스를 …","frontmatter":{"categories":"Interview","title":"AWS Korea Interview - Associate Solutions Architect","date":"October 13, 2022"},"fields":{"slug":"/Interview/AWS-interview/"}}},{"node":{"id":"8782669c-fbf9-5ac9-8855-07b817890160","excerpt":"ESORICS2022.pdf\nESORICS2022-citation.bib\nKSC2022.pdf\nUCWIT2022.pdf\nSTAAR_Workshop2022_Presentation.pdf\nESORICS2022_Presentation.pdf\nKSC2022_Presentation","frontmatter":{"categories":"CV","title":"CV Asset","date":"December 14, 1999"},"fields":{"slug":"/CV/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"송소민","bio":{"role":"연구원","description":["클라우드 컴퓨팅","컨테이너 보안","악성 코드 분석"],"thumbnail":"MiniMemoji.gif"},"social":{"github":"https://github.com/sominsong","linkedIn":"https://www.linkedin.com/in/somin-song-749722201/","email":"sominsong97@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}