{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/BPF-LSM/",
    "result": {"data":{"cur":{"id":"ba844679-8b48-511e-87ab-09f24c363b56","html":"<p>석사 과정동안 진행했던 과제에서 BPF-LSM 기술을 사용하여 컨테이너 환경을 위한 보안 모듈을 개발한 적이 있다.\n이번 기회에 관련된 내용들을 복습하고, 또 정리해두면 좋을 것 같았다.</p>\n<h2 id=\"0-bpf-lsm-기술이란\" style=\"position:relative;\"><a href=\"#0-bpf-lsm-%EA%B8%B0%EC%88%A0%EC%9D%B4%EB%9E%80\" aria-label=\"0 bpf lsm 기술이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. BPF-LSM 기술이란</h2>\n<p>BPF-LSM 기술을 한 마디로 정리하자면 다음과 같다.</p>\n<blockquote>\n<p>Privileged User가 MAC(Mandatory Access Control) 및 Audit 정책을 구현하기 위해 BPF 프로그램을 LSM Hook에 연결하여 시스템을 런타임 계측(Runtime Instrumentation)하는 보안 모듈</p>\n</blockquote>\n<p>즉, BPF-LSM이란 기술을 이해하기 위해선 MAC, BPF, LSM에 대한 개념이 선행되어야 한다.\n따라서 BPF-LSM을 본격적으로 정리하기에 앞서, 관련 기술들을 먼저 하나씩 정리해보았다.</p>\n<p>정리된 글들은 다음에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://sominsong.github.io/eBPF/\"><strong>eBPF</strong></a></li>\n<li><a href=\"https://sominsong.github.io/BCC/\"><strong>BCC</strong></a></li>\n<li><a href=\"https://sominsong.github.io/LSM/\"><strong>LSM</strong></a></li>\n</ul>\n<p>BPF-LSM 기술을 알기 위해서는 KSRI 기술을 먼저 이해해야 한다.\nKRSI는 BPF-LSM이 커널 메인스트림에 병합되기 전 진행되었던 프로젝트의 이름으로 BPF-LSM의 전신이라고 할 수 있다.</p>\n<h2 id=\"1-krsi---kernel-runtime-security-instrumentation\" style=\"position:relative;\"><a href=\"#1-krsi---kernel-runtime-security-instrumentation\" aria-label=\"1 krsi   kernel runtime security instrumentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. KRSI - Kernel Runtime Security Instrumentation</h2>\n<p>기존에 리눅스 환경에서 보안을 강화하는 방법에는 크게 두 가지가 존재했다.\n하나는 악의적인 움직임을 감지하고 이에 대한 정보를 제공하는 것과 다른 하나는 특정 rule에 해당하는 악의적인 움직임을 차단하는 것이다.</p>\n<p>전자에 해당하는 보안 모듈의 경우, 사전에 정의된 규칙에 따라 시스템에서 발생하는 보안 관련 이벤트를 로그로 기록하는 Audit과 Kernel Tracing Point를 이용하여 시스템의 명령이나 어플리케이션의 영향을 추적하는 Perf 등이 있다.</p>\n<p>후자에 해당하는 보안 모듈의 경우, 정해진 Profile에 따라 액세스를 제어하는 SELinux, AppArmor, 프로세스가 사용할 수 있는 시스템콜을 제한하는 Seccomp 등이 있다.</p>\n<p>이 두 가지는 이전까지 ‘동전의 양면’ 관계로 존재했으며, 두 가지 측면에 대하여 서로 다른 모듈로써 존재하기 때문에 동시에 관리하기가 어려웠다.</p>\n<p>이에 KRSI는 이 두 가지를 하나의 API로 제공하여 전반적인 시스템 동작을 제어 및 감시할 수 있도록 만드는 프로젝트이다.</p>\n<p>KRSI의 특징은 다음과 같다:</p>\n<ul>\n<li>악의적인 행동을 기록하는 것 &#x26; 차단하는 것, 두 가지에 대한 Rule을 작성할 수 있는 통합적인 API를 제공</li>\n<li>LSM(Linux Security Module) 이벤트를 이용하여 세세한 MAC 규칙을 시스템에 적용</li>\n<li>eBPF 기반 기술이기 때문에 Rule Update 시 커널의 재 컴파일이 불필요</li>\n</ul>\n<h2 id=\"2-krsi-구현\" style=\"position:relative;\"><a href=\"#2-krsi-%EA%B5%AC%ED%98%84\" aria-label=\"2 krsi 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. KRSI 구현</h2>\n<p>앞서 간략히 설명했듯이, KRSI는 eBPF와 LSM(Linux Security Module)을 이용해서 구현된다.\nLSM은</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://lwn.net/Articles/808048/\">https://lwn.net/Articles/808048/</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#0-bpf-lsm-%EA%B8%B0%EC%88%A0%EC%9D%B4%EB%9E%80\">0. BPF-LSM 기술이란</a></li>\n<li><a href=\"#1-krsi---kernel-runtime-security-instrumentation\">1. KRSI - Kernel Runtime Security Instrumentation</a></li>\n<li><a href=\"#2-krsi-%EA%B5%AC%ED%98%84\">2. KRSI 구현</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n</div>","excerpt":"석사 과정동안 진행했던 과제에서 BPF-LSM 기술을 사용하여 컨테이너 환경을 위한 보안 모듈을 개발한 적이 있다.\n이번 기회에 관련된 내용들을 복습하고, 또 정리해두면 좋을 것 같았다. 0. BPF-LSM 기술이란 BPF-LSM 기술을 한 마디로 정리하자면 다음과 같다. Privileged User가 MAC(Mandatory Access Control) 및 Audit 정책을 구현하기 위해 BPF 프로그램을 LSM Hook에 연결하여 시스템을 런타임 계측(Runtime Instrumentation)하는 보안 모듈 즉, BPF-LSM이란 기술을 이해하기 위해선 MAC, BPF, LSM에 대한 개념이 선행되어야 한다.\n따라서 BPF-LSM을 본격적으로 정리하기에 앞서, 관련 기술들을 먼저 하나씩 정리해보았다. 정리된 글들은 다음에서 확인할 수 있다. eBPF BCC LSM BPF-LSM 기술을 알기 위해서는 KSRI 기술을 먼저 이해해야 한다.\nKRSI는 BPF-LSM이 커널 메인스트…","frontmatter":{"date":"October 31, 2022","title":"TIL - BPF-LSM","categories":"TIL Linux","author":"Mini","emoji":"📖"},"fields":{"slug":"/BPF-LSM/"}},"next":{"id":"0489ec5c-997d-5236-8341-bff4776f9677","html":"<p><a href=\"https://github.com/iovisor/bcc\">BCC</a>는 커널 tracing이나 manipulation 프로그램을 만들기 위한 유용한 toolkit을 제공하는 오픈 소스이다.</p>\n<p>맨처음 eBPF 프로그램을 작성하기 시작한다면, 어려워하는 부분이 바로 eBPF 프로그램을 컴파일하고 커널 소스코드에서 eBPF 라이브러리를 연결하는 부분일 것이다.\n이러한 부분을 해결해주기 위해 등장한 Toolkit이 BCC라고 보면 된다.</p>\n<p>즉, BCC는 eBPF 프로그램 작성, 컴파일 및 로드를 위한 Toolchain을 제공하고, 뿐만 아니라 performance issue 디버깅 및 진단을 위한 여러 가지 예제 프로그램과 도구도 제공한다.</p>\n<p>2015년 4월 출시 이후 많은 개발자에 의해 BCC가 발전했으며, 수많은 <a href=\"https://github.com/iovisor/bcc/tree/master/examples\">예제 코드</a>와 함께 즉시 사용 가능한 <a href=\"https://github.com/iovisor/bcc/tree/master/tools\">tracing tool</a>이 제작되었다.</p>\n<p>예를 들어, <a href=\"https://github.com/iovisor/bcc/blob/master/tools/lib/ugc.py\">garbage collection 이벤트 추적</a>, <a href=\"https://github.com/iovisor/bcc/blob/master/tools/lib/ucalls.py\">method call과 system call 추적</a>, <a href=\"https://github.com/iovisor/bcc/blob/master/tools/lib/uthreads.py\">스레드 생성 및 소멸 추적</a>을 위해 작성된 USDT(User Statically-Defined Tracing) probes를 사용하는 스크립트 등이 있다.\n이러한 probe는 이름에서도 알 수 있듯이, 컴파일 타임에 정적으로 사용자의 application에 삽입된다.</p>\n<p>BCC는  eBPF 프로그램 작성을 위해 기존에 LLVM/Clang 컴파일러에서 제공하는 C언어뿐만 아니라 파이썬, Go, Lua 언어를 위한 front-end를 지원한다.</p>\n<p>예를 들어, 다음 코드는 파이썬으로 작성되었으며, <code class=\"language-text\">clone()</code> 시스템콜 이벤트가 발생한 경우 <code class=\"language-text\">kprobe__sys_clone()</code> 함수를 수행하고 <code class=\"language-text\">Hello World</code>를 화면에 출력하는 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bcc <span class=\"token keyword\">import</span> BPF\nprogram <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n        int kprobe__sys_clone(void *ctx){\n            bpf_trace_printk(\"Hello World\");\n            return 0;\n        }\n\"\"\"</span>\nb <span class=\"token operator\">=</span> BPF<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span>program<span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>attach_kprobe<span class=\"token punctuation\">(</span>event<span class=\"token operator\">=</span><span class=\"token string\">\"sys_clone\"</span><span class=\"token punctuation\">,</span> fn_name<span class=\"token operator\">=</span><span class=\"token string\">\"kprobe__sys_clone\"</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>trace_print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>전체 eBPF 프로그램이 <code class=\"language-text\">program</code> 변수에 포함되며, 이 변수는 커널 내부의 eBPF VM애서 실행되는 코드이다.</p>\n<p>함수 이름인 <code class=\"language-text\">kprobe__sys_clone()</code>의 형식은 중요하다.\n<code class=\"language-text\">kprobe__</code> 접두사는 BCC toolchain에 kprobe에 뒤따르는 커널 심볼들을 attach하도록 지시하기 때문이다.\n이 경우, 뒤따르는 커널 심볼은 <code class=\"language-text\">sys_clone()</code>이다.</p>\n<p><code class=\"language-text\">sys_clone()</code>이 호출되고 <code class=\"language-text\">kprobe</code>가 실행되면, eBPF 프로그램이 동작하고 <code class=\"language-text\">bpf_trace_printk()</code> 함수가 <code class=\"language-text\">Hello, World!</code>를 커널의 trace buffer로 출력한다.</p>\n<p>BCC는 front-end를 통해 파이썬을 바인딩하고, BPF back-end가 있는 LLVM/Clang 컴파일러를 호출하여 C를 eBPF 바이트코드로 변환한다.\n그런 다음, BCC는 <code class=\"language-text\">bpf()</code> 시스템콜을 사용하여 eBPF 바이트 코드를 커널에 로드하는 작업을 처리한다.</p>\n<p>예를 들어, in-kernel verifier의 검사가 실패한 경우와 같이 로드가 실패하면 BCC는 로드가 실패한 이유에 대한 힌트를 다음과 같이 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HINT: The `map_value_or_null` error can happen if you dereference a pointer value from a map loopup without first checking if that pointer is NULL</code></pre></div>\n<p>이러한 에러 로그도 BCC를 구성하는 또 다른 주요한 기능히다.\n올바른 eBPF 프로그램을 작성하는 것은 매우 까다로운 작업이기 때문에, BCC가 이를 도울 수 있다.</p>\n<p><code class=\"language-text\">BPF.trace_print()</code>는 커널의 trace 버퍼 파일(<code class=\"language-text\">/sys/kernel/debug/tracing/trace_pipe</code>)에 blocking read를 수행하여 버퍼 파일의 내용을 standard output으로 프린트한다.\n출력은 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    gnome-terminal--3210  [003] d..2 19252.369014: 0x00000001: Hello, World!\n    gnome-terminal--3210  [003] d..2 19252.369080: 0x00000001: Hello, World!\n    pool-21543 [001] d..2 19252.382317: 0x00000001: Hello, World!\n    bash-21545 [002] d..2 19252.385535: 0x00000001: Hello, World!\n    bash-21546 [003] d..2 19252.385752: 0x00000001: Hello, World!\n    bash-21545 [002] d..2 19252.386883: 0x00000001: Hello, World!</code></pre></div>\n<p>출력은 다음을 포함한다:</p>\n<ul>\n<li>kprobe를 트리거한 application 이름</li>\n<li>application의 PID</li>\n<li>실행 중인 CPU ([괄호] 안)</li>\n<li>다양한 프로세스의 context</li>\n<li>타임스탬프</li>\n<li>주소 0x00000001: 일반적으로 커널 코드가 trace 버퍼에 기록할 때 <code class=\"language-text\">trace_printk()</code> 호출 뒤에 instruction pointer address가 해당 필드에 프린트된다. 그러나 이 함수는 <code class=\"language-text\">bpf_trace_prink()</code>에 대해 구현되어 있지 않으므로 하드 코딩된 주소값인 <code class=\"language-text\">0x00000001</code>이 항상 사용된다.</li>\n<li><code class=\"language-text\">bpf_trace_printk()</code>에 전달한 “Hello, World” 문자열</li>\n</ul>\n<p>이렇게 <code class=\"language-text\">bpr_trace_prink()</code>를 이용하여 런타임 디버깅을 할 수 있지만, <code class=\"language-text\">trace_pipe</code> 파일이 전역 리소스이기 때문에 concurrent writer가 작성한 모든 메세지를 포함하므로, 단일 BPF 프로그램의 메세지를 필터링하기 어렵다는 단점이 존재한다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://lwn.net/Articles/742082/\">https://lwn.net/Articles/742082/</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 27, 2022","title":"TIL - BCC (eBPF Compiler Collection)","categories":"TIL Linux","author":"Mini","emoji":"📖"},"fields":{"slug":"/BCC/"}},"prev":{"id":"823a0dd8-02b8-5ba2-8cc9-82cd03c5dffd","html":"<h2 id=\"알고리즘-사이트\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"알고리즘 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 사이트</h2>\n<ul>\n<li><a href=\"https://www.acmicpc.net/step\">백준</a></li>\n<li><a href=\"https://programmers.co.kr\">프로그래머스</a></li>\n<li><a href=\"https://codeforces.com\">코드포스</a></li>\n</ul>\n<h2 id=\"알고리즘-순서\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%88%9C%EC%84%9C\" aria-label=\"알고리즘 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 순서</h2>\n<ol>\n<li><strong>그리디(Greedy) 알고리즘</strong></li>\n<li><strong>탐색(Search) 알고리즘</strong> - 완전 탐색, BFS, DFS</li>\n<li><strong>기본 동적 프로그래밍</strong></li>\n<li>그래프 이론</li>\n<li>문자열</li>\n<li>고급 동적 프로그래밍</li>\n</ol>\n<h2 id=\"유용-python-라이브러리\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9A%A9-python-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"유용 python 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유용 Python 라이브러리</h2>\n<ul>\n<li><code class=\"language-text\">itertools</code>: 반복 데이터 처리 / 순열과 조합 / 완전 탐색 알고리즘</li>\n<li><code class=\"language-text\">heapq</code>: 우선순위 큐 / Dijkstra Algorithm와 같은 최단 경로 알고리즘</li>\n<li><code class=\"language-text\">bisect</code>: Binary Search</li>\n<li><code class=\"language-text\">collections</code>: deque, counter 자료구조 포함</li>\n<li><code class=\"language-text\">math</code>: 수학 기능</li>\n</ul>\n<h2 id=\"알고리즘-개념-정리\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC\" aria-label=\"알고리즘 개념 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 개념 정리</h2>\n<h3 id=\"0-complexity\" style=\"position:relative;\"><a href=\"#0-complexity\" aria-label=\"0 complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. Complexity</h3>\n<ul>\n<li>\n<p>Timte Complexity: 특정 크기 입력에 대한 수행 시간</p>\n</li>\n<li>\n<p>Space Complexity: 특정 크기 입력에 대한 메모리 사용량</p>\n</li>\n<li>\n<p>Big-O Notation</p>\n<ul>\n<li>\n<p>가장 빠르게 증가하는 항만을 고려하는 표기법</p>\n<ul>\n<li>함수의 상한을 나타냄</li>\n<li>3N^3 + 5N^2 + 1,000,000 -> O(N^3)</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도 비교</p>\n<ul>\n<li>O(1) Constant time (상수 시간)</li>\n<li>O(log N) Log time (로그 시간)</li>\n<li>O(N) Linear time (선형 시간)</li>\n<li>O(NlogN) Log linear time (로그 선형 시간)</li>\n<li>O(N^2) 이차 시간</li>\n<li>O(N^3) 삼차 시간</li>\n<li>O(2^n) Exponential time (지수 시간)</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도에 따른 수행시간 요구 사항 (시간제한: 1초)</p>\n<ul>\n<li>N &#x3C;= 500 : O(N^3)</li>\n<li>N &#x3C;= 2,000 : O(N^2)</li>\n<li>N &#x3C;= 100,000 : O(NlogN)</li>\n<li>N &#x3C;= 10,000,000 : O(N)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-greedy-algorithm\" style=\"position:relative;\"><a href=\"#1-greedy-algorithm\" aria-label=\"1 greedy algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Greedy Algorithm</h3>\n<ul>\n<li>\n<p><strong>현재 상황에서 지금 당장 좋은 것만 고르는 방법</strong></p>\n</li>\n<li>\n<p>일반적으로 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구</p>\n</li>\n<li>\n<p>Greedy Solution은 정당성이 중요 = 단순히 현재 상황에서 가장 좋은 것을 반복적으로 선택하는 것만으로도 최적의 해를 구할 수 있는지? 보장해야 함</p>\n</li>\n<li>\n<p>일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다.</p>\n<ul>\n<li>하지만, 코테의 경우는 출제자가 그리디로 얻은 해가 최적의 해가 되는 특수한 상황을 제시하기 때문에 예외다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예시-문제-거스름돈-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 거스름돈 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 거스름돈 문제</h4>\n<ul>\n<li>\n<p>정당성 분석: 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는?</p>\n<ul>\n<li>가지고 있는 동전 중에서 ”<em>큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문</em>”</li>\n<li>만약 800원을 거슬러주어야 하는데 화폐 단위가 500원, 400원, 100원일 경우는 해당하지 않음</li>\n</ul>\n</li>\n<li>\n<p>답안 예시</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">1260</span> <span class=\"token comment\"># 총 거슬러줘야 할 금액</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 거스름돈</span>\n\n<span class=\"token keyword\">for</span> coin <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">+=</span> n <span class=\"token operator\">//</span> coin <span class=\"token comment\"># 나누기 후 몫 = 동전 개수</span>\n    n <span class=\"token operator\">%=</span> coin\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>시간 복잡도 분석</p>\n<ul>\n<li>금액 자체와는 무관, 거스름돈의 종류에만 영향을 받음</li>\n<li>거스름돈 종류가 K개 일 때, O(K)</li>\n</ul>\n</li>\n<li>\n<p>구현(Implementation) 문제: 풀이는 떠올리기 쉽지만 소스코드로 구현하기 어려운 문제들</p>\n<ul>\n<li>실수 연산, 특정 소수점 자리까지 출력</li>\n<li>적절한 라이브러리 사용 (e.g., 순열과 조합)</li>\n</ul>\n</li>\n<li>\n<p>구현 문제: 시물레이션 및 완전 탐색 문제</p>\n<ul>\n<li>\n<p>2차원 공간에서의 방향 벡터 자주 활용:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 동, 북, 서, 남</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 현재 위치</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 다음 위치</span>\n    nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예시-문제-상하좌우-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 상하좌우 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 상하좌우 문제</h4>\n<ul>\n<li>답안 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 동(R), 서(L), 남(D), 북(U)</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndirect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"U\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 현재 위치</span>\n\n<span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> plan<span class=\"token punctuation\">:</span>\n    nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>direct<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>direct<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">></span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">></span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">,</span> ny\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-dfs--bfs\" style=\"position:relative;\"><a href=\"#2-dfs--bfs\" aria-label=\"2 dfs  bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DFS &#x26; BFS</h3>\n<ul>\n<li>\n<p><strong>대표적인 그래프 탐색 알고리즘</strong></p>\n</li>\n<li>\n<p>Search란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미</p>\n</li>\n<li>\n<p>필수 자료구조</p>\n<ul>\n<li>Stack: 선입 후출 (FILO)\n<ul>\n<li>insert(<code class=\"language-text\">list.append()</code>), delete(<code class=\"language-text\">list.pop()</code>)로 동작 구성</li>\n<li>cf) 리스트 최상단 원소부터 출력 (<code class=\"language-text\">list[::-1]</code>)</li>\n</ul>\n</li>\n<li>Queue: 선입 선출 (FIFO)\n<ul>\n<li>deque 라이브러리 사용: <code class=\"language-text\">from collections import deque</code>, <code class=\"language-text\">queue=deque()</code></li>\n<li>insert(<code class=\"language-text\">queue.append()</code>), delete(<code class=\"language-text\">queue.popleft()</code>)로 동작 구성</li>\n<li>cf) 나중에 들어온 원소부터 출력 (<code class=\"language-text\">queue.reverse()</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>필수 개념</p>\n<ul>\n<li>Recursive Function: 자기 자식을 다시 호출하는 함수</li>\n<li>컴퓨터 메모리 내부의 Stack 프레임에 함수 호출이 쌓이는 방식으로 작동함</li>\n<li>DFS에 이용됨</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"예시-문제-팩토리얼-구현-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B5%AC%ED%98%84-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 팩토리얼 구현 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 팩토리얼 구현 문제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial_iterative</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># 1부터 n까지의 수를 차례때로 곱하기</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">*=</span> i\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">factorial_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># n이 1 이하인 경우 1을 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># n! = n * (n-1)!를 그대로 코드로 작성</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial_recursive<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"예시-문제-유클리드-호제법-euclidean-algorithm-최대공약수-계산-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95-euclidean-algorithm-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98-%EA%B3%84%EC%82%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 유클리드 호제법 euclidean algorithm 최대공약수 계산 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 유클리드 호제법 (Euclidean Algorithm, 최대공약수 계산) 문제</h4>\n<ul>\n<li>유클리드 호제법\n<ul>\n<li>두 자연수 A,B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 한다.</li>\n<li>이 때, A와 B의 최대공약수는 B와 R의 최대공약수와 같다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># greatest common degree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">%</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> b\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>DFS (Depth-First Search)</strong>\n<ul>\n<li>깊이 우선 탐색, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘</li>\n<li>Stack 자료구조(혹은 재귀함수)를 이용\n<ol>\n<li>탐색 시작 노드를 Stack에 삽입하고 방문 처리</li>\n<li>Stack의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 Stack에 넣고 방문 처리. 방문하지 않은 인접 노드가 없으면 Stack에서 최상단 노드를 꺼냄</li>\n<li>더 이상 2번의 과정을 수행할 수 없을 때까지 반복함</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"dfs-소스코드-예제\" style=\"position:relative;\"><a href=\"#dfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\" aria-label=\"dfs 소스코드 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DFS 소스코드 예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 각 노드가 연결된 정보를 표현 (2차원 리스트)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\"># 0</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 1</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 2</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 3</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 4</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 5</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 6</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 7</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 8</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 각 노드가 방문된 정보를 표현 (1차원 리스트)</span>\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span>\n\n<span class=\"token comment\"># DFS 메서드 정의</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 현재 노드를 방문 처리</span>\n    visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 현재 노드와 연결된 다른 노드를 재귀적으로 방문</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 정의된 DFS 함수 호출</span>\ndfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><strong>BFS (Breadth-First Search)</strong>\n<ul>\n<li>너비 우선 탐색, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘</li>\n<li>Queue 자료구조 이용\n<ol>\n<li>탐색 시작 노드를 Queue에 삽입하고 방문 처리</li>\n<li>Queue에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 Queue에 삽입하고 방문 처리</li>\n<li>더 이상 2번의 과정을 수행할 수 없을 때까지 반복</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"bfs-소스코드-예제\" style=\"position:relative;\"><a href=\"#bfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\" aria-label=\"bfs 소스코드 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS 소스코드 예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 각 노드가 연결된 정보를 표현 (2차원 리스트)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\"># 0</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 1</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 2</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 3</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 4</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 5</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 6</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 7</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 8</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 각 노드가 방문된 정보를 표현 (1차원 리스트)</span>\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span>\n\n<span class=\"token comment\"># BFS 메서드 정의</span>\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#Queue 구현을 위해 deque 라이브러리 사용</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 현재 노드 방문 처리</span>\n    visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token comment\"># 큐가 빌 때끼지 반복</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 큐에서 하나의 원소를 뽑아 출력하기</span>\n        v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 아직 방문하기 않은 인접한 원소들을 큐에 삽입</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token comment\"># 정의된 BFS 함수 호출</span>\nbfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"3-sorting\" style=\"position:relative;\"><a href=\"#3-sorting\" aria-label=\"3 sorting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Sorting</h3>\n<ul>\n<li>정렬: 데이터를 틁정한 기준에 따라 순서대로 나열하는 것</li>\n<li>일반적으로 문제 상황에 따라 적절한 정렬 알고리즘이 공식처럼 사용됨</li>\n</ul>\n<ol>\n<li>\n<p>선택 정렬 (Selection Sort)</p>\n<ul>\n<li>처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    min_index <span class=\"token operator\">=</span> i <span class=\"token comment\"># 가장 작은 원소의 인덱스</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            min_index <span class=\"token operator\">=</span> j\n    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\"># swap</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>시간 복잡도: N번만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다\n<ul>\n<li>전체 연산 횟수: N + (N-1) + (N-2) + … + 2 => $(N^{2} + N -2)/2$ => O($N^{2}$)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-binary-search\" style=\"position:relative;\"><a href=\"#4-binary-search\" aria-label=\"4 binary search permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Binary Search</h3>\n<h3 id=\"5-dynamic-programming\" style=\"position:relative;\"><a href=\"#5-dynamic-programming\" aria-label=\"5 dynamic programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Dynamic Programming</h3>\n<h3 id=\"6-shortest-path\" style=\"position:relative;\"><a href=\"#6-shortest-path\" aria-label=\"6 shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Shortest Path</h3>\n<h3 id=\"7-graph\" style=\"position:relative;\"><a href=\"#7-graph\" aria-label=\"7 graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Graph</h3>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/91433923\">나동빈. (2021). 이것이 취업을 위한 코딩 테스트다</a></li>\n</ul>","frontmatter":{"date":"November 01, 2022","title":"알고리즘 공부 순서 정리 및 사이트 정리","categories":"Algorithm","author":"Mini","emoji":"🧩"},"fields":{"slug":"/Algorithm/"}},"site":{"siteMetadata":{"siteUrl":"https://sominsong.github.io","comments":{"utterances":{"repo":"sominsong/sominsong.github.io"}}}}},"pageContext":{"slug":"/BPF-LSM/","nextSlug":"/BCC/","prevSlug":"/Algorithm/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}