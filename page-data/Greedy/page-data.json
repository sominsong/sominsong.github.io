{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Greedy/",
    "result": {"data":{"cur":{"id":"b6be3d51-ff16-5d9c-a6bf-b3690b5640ed","html":"<h2 id=\"greedy-algorithm\" style=\"position:relative;\"><a href=\"#greedy-algorithm\" aria-label=\"greedy algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Greedy Algorithm</h2>\n<ul>\n<li>\n<p><strong>현재 상황에서 지금 당장 좋은 것만 고르는 방법</strong></p>\n</li>\n<li>\n<p>일반적으로 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구</p>\n</li>\n<li>\n<p>Greedy Solution은 정당성이 중요 = 단순히 현재 상황에서 가장 좋은 것을 반복적으로 선택하는 것만으로도 최적의 해를 구할 수 있는지? 보장해야 함</p>\n</li>\n<li>\n<p>일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다.</p>\n<ul>\n<li>하지만, 코테의 경우는 출제자가 그리디로 얻은 해가 최적의 해가 되는 특수한 상황을 제시하기 때문에 예외다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"예시-문제-거스름돈-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 거스름돈 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 거스름돈 문제</h3>\n<ul>\n<li>\n<p>정당성 분석: 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는?</p>\n<ul>\n<li>가지고 있는 동전 중에서 ”<em>큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문</em>”</li>\n<li>만약 800원을 거슬러주어야 하는데 화폐 단위가 500원, 400원, 100원일 경우는 해당하지 않음</li>\n</ul>\n</li>\n<li>\n<p>답안 예시</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token number\">1260</span> <span class=\"token comment\"># 총 거슬러줘야 할 금액</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 거스름돈</span>\n\n<span class=\"token keyword\">for</span> coin <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n    count <span class=\"token operator\">+=</span> n <span class=\"token operator\">//</span> coin <span class=\"token comment\"># 나누기 후 몫 = 동전 개수</span>\n    n <span class=\"token operator\">%=</span> coin\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>시간 복잡도 분석</p>\n<ul>\n<li>금액 자체와는 무관, 거스름돈의 종류에만 영향을 받음</li>\n<li>거스름돈 종류가 K개 일 때, O(K)</li>\n</ul>\n</li>\n<li>\n<p>구현(Implementation) 문제: 풀이는 떠올리기 쉽지만 소스코드로 구현하기 어려운 문제들</p>\n<ul>\n<li>실수 연산, 특정 소수점 자리까지 출력</li>\n<li>적절한 라이브러리 사용 (e.g., 순열과 조합)</li>\n</ul>\n</li>\n<li>\n<p>구현 문제: 시물레이션 및 완전 탐색 문제</p>\n<ul>\n<li>\n<p>2차원 공간에서의 방향 벡터 자주 활용:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 동, 북, 서, 남</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 현재 위치</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 다음 위치</span>\n    nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"예시-문제-상하좌우-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 상하좌우 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 상하좌우 문제</h3>\n<ul>\n<li>답안 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 동(R), 서(L), 남(D), 북(U)</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndirect <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"U\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 현재 위치</span>\n\n<span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> plan<span class=\"token punctuation\">:</span>\n    nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>direct<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>direct<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">></span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">></span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">,</span> ny\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/91433923\">나동빈. (2021). 이것이 취업을 위한 코딩 테스트다</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#greedy-algorithm\">Greedy Algorithm</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88-%EB%AC%B8%EC%A0%9C\">예시 문제: 거스름돈 문제</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0-%EB%AC%B8%EC%A0%9C\">예시 문제: 상하좌우 문제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","excerpt":"Greedy Algorithm 현재 상황에서 지금 당장 좋은 것만 고르는 방법 일반적으로 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구 Greedy Solution은 정당성이 중요 = 단순히 현재 상황에서 가장 좋은 것을 반복적으로 선택하는 것만으로도 최적의 해를 구할 수 있는지? 보장해야 함 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다. 하지만, 코테의 경우는 출제자가 그리디로 얻은 해가 최적의 해가 되는 특수한 상황을 제시하기 때문에 예외다. 예시 문제: 거스름돈 문제 정당성 분석: 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는? 가지고 있는 동전 중에서 ”큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문” 만약 800원을 거슬러주어야 하는데 화폐 단위가 500원, 400원, 100원일 경우는 해당하지 않음 답안 예시 시간 복잡도 분석 금액 자체와는 무관…","frontmatter":{"date":"November 02, 2022","title":"Greedy 알고리즘 정리","categories":"Algorithm","author":"Mini","emoji":"🧩"},"fields":{"slug":"/Greedy/"}},"next":{"id":"18d3100f-4441-53e8-b43c-09be2e5d431d","html":"<p>좋은 기회로 Cisco Research 본사에서 Intership Program Offer를 받았다.</p>\n<p>Resume는 제공한 상태이지만, 앞으로의 프로세스에서 어떻게 인터뷰가 진행될지 자세한 안내가 없었기 때문에 남은 기간동안 무엇을 준비해야 하는지 굉장히 막막했다.\n특히, 외국계 기업인데다가 Research이며, Intership Program이기 때문에 어떻게 인터뷰 과정이 진행되는지 대체 감이 오질 않았다.</p>\n<p>따라서 구글링을 통해 Cisco Interview를 준비하면서 참고하면 좋을만한 것들을 정리해두기로 했다.</p>\n<p>참고로 Offer를 주신 분께서는 Coding Test와 1 시간 가량의 Interview 프로세스가 있을 것이라고 안내해주셨다.</p>\n<p>Cisco 채용 페이지에서 Security 관련 Internship Program을 찾아보니 다음 포지션이 제일 관련도가 높아 보였다.</p>\n<h2 id=\"cisco-internship-interview-reference\" style=\"position:relative;\"><a href=\"#cisco-internship-interview-reference\" aria-label=\"cisco internship interview reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cisco Internship Interview Reference</h2>\n<p>GeeksforGeeks에 Cisco Intership 인터뷰 경험이 정리된 많은 게시글들이 있었다.\nCisco Research가 아니라, Cisco의 학부생 Intership 과정인 것 같았지만 적어도 코딩 테스트와 Technical Interview 질문 몇 개는 건질 수 있지 않을까해서 링크를 아래에 정리해 둔다.</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-for-internshipfte-on-campus-virtual-2023/?ref=rp\">https://www.geeksforgeeks.org/cisco-interview-experience-for-internshipfte-on-campus-virtual-2023/?ref=rp</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-fy-2023-on-campus-iit-bhu/?ref=rp\">https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-fy-2023-on-campus-iit-bhu/?ref=rp</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-2022-23-on-campus-virtual/?ref=rp\">https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-2022-23-on-campus-virtual/?ref=rp</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-on-campus-virtual-hiring-for-internship-2020-21/?ref=rp\">https://www.geeksforgeeks.org/cisco-interview-experience-on-campus-virtual-hiring-for-internship-2020-21/?ref=rp</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-virtual-hiringon-campus-for-internship-2020-21/?ref=rp\">https://www.geeksforgeeks.org/cisco-interview-experience-virtual-hiringon-campus-for-internship-2020-21/?ref=rp</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-for-software-engineer-6-months-internship/?ref=gcse\">https://www.geeksforgeeks.org/cisco-interview-experience-for-software-engineer-6-months-internship/?ref=gcse</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-internship-interview-experience-for-network-embedded-application-development/?ref=gcse\">https://www.geeksforgeeks.org/cisco-internship-interview-experience-for-network-embedded-application-development/?ref=gcse</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-summer-internship-feb-2019/?ref=gcse\">https://www.geeksforgeeks.org/cisco-interview-experience-summer-internship-feb-2019/?ref=gcse</a></li>\n</ul>\n<h2 id=\"online-coding-round\" style=\"position:relative;\"><a href=\"#online-coding-round\" aria-label=\"online coding round permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Online Coding Round</h2>\n<p>두 가지 유형이 출제되는 것 같았다: <strong>코딩 문제</strong>와 <strong>MCQs(Multiple Choice Questions)</strong>\n찾아본 자료에 의하면, 2개의 코딩 문제와 40개의 MCQ가 출제된다고 한다.\n또한, 시간은 두 가지를 합쳐서 1시간 40분이라고 한다.</p>\n<p><strong>코딩 문제</strong> 관련해서 출제되는 문제는 다음과 같았다:</p>\n<ul>\n<li>Floyd Warchall 알고리즘 / Dijkstra 알고리즘을 기반으로 한 질문</li>\n<li>그래프를 기반으로 한 질문. 각 노드에 tower가 있고, 각 노드는 하나의 tower를 가지거나 인접 노트가 하나의 tower를 가지는 조건을 제공함. 이 때 그러한 tower의 최소 수를 출력하는 문제 (무슨 말?)</li>\n</ul>\n<p>Data Structure Algorithm을 위주로 준비하기 위한 링크는 아래에 있다</p>\n<ul>\n<li><a href=\"https://velog.io/@swiftist9891/DSA%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B0-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%AA%A8%EC%9D%8C\">https://velog.io/@swiftist9891/DSA공부하기-유용한-링크모음</a></li>\n</ul>\n<p><strong>MCQs</strong>는 다음과 같이 출제되었다:\nOS, OOP 및 컴퓨터 네트워킹</p>\n<h2 id=\"technical-interview\" style=\"position:relative;\"><a href=\"#technical-interview\" aria-label=\"technical interview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Technical Interview</h2>\n<p>아마 이 과정에서는 두 가지로 나뉠 수 있을 것 같다.\n내가 메일로 보내드린 Resume 관련 질문을 하거나, 이와 무관한 Technical Interview를 진행하거나.</p>\n<p>따라서 Resume 관련한 공부들을 매일 조금씩 정리했고 (TIL에 정리)\n이와 무관한 Technical Interview 내용들도 숙지해야 한다.</p>\n<p>이건 AWS Interview에서 준비했던 링크들을 참고하면 좋을 것 같아, 이를 참고했다:</p>\n<ul>\n<li><a href=\"https://velog.io/@jeon3029/%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B3%B5%ED%95%99-CS-%EA%B3%B5%EB%B6%80%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%8B%A8%EC%88%9C-%EB%A7%81%ED%81%AC-%EB%AA%A8%EC%9D%8C\">IT 기업 면접 준비, 컴퓨터 공학 CS 공부를 위한 유용한 링크(단순 링크 모음)</a></li>\n<li><a href=\"https://github.com/JaeYeopHan/Interview_Question_for_Beginner\">Interview Question for Beginner</a></li>\n</ul>\n<p>아래는 찾아본 자료에서 언급한 여러 인터뷰 Question들을 간략하게 정리해봤다.</p>\n<p>찾아본 자료에 의하면, 3번의 인터뷰 라운드(technical 2번, HR 1번)를 거쳤다고 했다.\n또한, 각 인터뷰 시간은 50분씩이었다.</p>\n<p>Technical Round 1 에서의 인터뷰 내용은 다음과 같다:</p>\n<ul>\n<li>자기 소개</li>\n<li>Tech Stack과 관심 분야를 물어봄</li>\n<li>네트워크 관련해서 다음 질문을 함:\n<ul>\n<li>Networking이라는 용어가 무엇인지, Network의 유형</li>\n<li>P2P 및 Client-Server 네트워크, 장단점\n<ul>\n<li>실생활에서 P2P의 예</li>\n</ul>\n</li>\n<li>네트워킹 Layering 및 Switching\n<ul>\n<li>구글 크롬에서 작동하는 Layering 패턴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>프로젝트에서 사용한 OS에 대해 질문:\n<ul>\n<li>해당 OS에서 네트워킹 사례</li>\n<li>해당 OS의 inter-process 통신 기술</li>\n<li>메세지 큐의 작업 기술</li>\n</ul>\n</li>\n<li>가장 좋아하는 데이터 구조 질문(자료에서는 tree라 대답):\n<ul>\n<li>내부 구현에서 tree를 사용하는 STL container에 대해 설명</li>\n</ul>\n</li>\n<li>공간 복잡도가 O(1)에서 하나의 숫자를 search할 확률</li>\n</ul>\n<p>Technical Round 2 에서의 인터뷰 내용은 다음과 같다:</p>\n<ul>\n<li>자기 소개</li>\n<li>프로젝트에 대한 설명: 어떤 문제를 해결하고자 했는가, 어떻게 구현했는가, 어떤 결과였는가\n<ul>\n<li>이외 프로젝트에 대한 추가 설명 요구</li>\n</ul>\n</li>\n<li>‘Operating System’이라는 용어를 일반인에게 설명</li>\n<li>Semaphore와 Busy Waiting에 대해 설명\n<ul>\n<li>실제 사례를 사용하여 Busy Waiting을 설명</li>\n</ul>\n</li>\n<li>네트워킹 관련 질문:\n<ul>\n<li>Switch와 Router의 차이점</li>\n<li>Router의 동작을 간략하게 설명</li>\n<li>OSI Reference Model에서 계층들</li>\n<li>OSI Model에서 Router와 Switch는 어느 layer에 위치?</li>\n<li>OSI Model의 몇 가지 계층에 대한 기능 설명</li>\n<li>IPv4 주소에서 다양한 클래스</li>\n</ul>\n</li>\n<li>DSA (Data Structure Algorithm) 문제\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/\">https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/</a></li>\n<li>이진수와 정수 n이 주어질 때, if-else 문 없이 비트연산자 AND와 OR만을 사용해서 n번째 비트를 뒤집는 함수 작성</li>\n</ul>\n</li>\n<li>OOPs 문제\n<ul>\n<li>shallow copy(얕은 복사)와 deep copy(깊은 복사)의 차이점</li>\n<li>copy constructer(복사 생성자)와 copy assignment operator(복사 할당 연산자)의 차이점</li>\n<li>실제 사례를 통한 상속(inheritance) 설명</li>\n<li>The Deadly Diamond of Death Probem(죽음의 다이아몬드 문제) 설명 및 그 해결책 설명</li>\n<li>OOP의 장점과 단점 설명</li>\n<li>이외 프로젝트에 대한 질문</li>\n</ul>\n</li>\n</ul>\n<p>HR Round 에서의 인터뷰 내용은 다음과 같고, 총 10분간 진행했다고 한다:</p>\n<ul>\n<li>Cisco의 경쟁업체가 누구인가?</li>\n<li>Cisco와 관련된 2가지 시사점(affair)</li>\n<li>관심사 (interest)</li>\n</ul>\n<h2 id=\"interview-english\" style=\"position:relative;\"><a href=\"#interview-english\" aria-label=\"interview english permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interview English</h2>\n<p>영어로 인터뷰는 처음이라, 인터뷰 과정에서 사용할만한 영어 표현들을 연습할 수 있도록 아래에 링크를 정리해두었다.</p>\n<p>이외 중요하게 연습했던 것은 영어 발음과 악센트 교정이다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-2022-23-on-campus-virtual/\">https://www.geeksforgeeks.org/cisco-interview-experience-for-internship-2022-23-on-campus-virtual/</a></li>\n</ul>","frontmatter":{"date":"November 01, 2022","title":"Cisco Research Interview - Intership Program","categories":"Interview","author":"Mini","emoji":"💼"},"fields":{"slug":"/CISCO-interview-preparation/"}},"prev":{"id":"b8e32788-cf1f-5ce5-b050-dcd4172f9322","html":"<ul>\n<li>\n<p><strong>대표적인 그래프 탐색 알고리즘</strong></p>\n</li>\n<li>\n<p>Search란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미</p>\n</li>\n<li>\n<p>필수 자료구조</p>\n<ul>\n<li>Stack: 선입 후출 (FILO)\n<ul>\n<li>insert(<code class=\"language-text\">list.append()</code>), delete(<code class=\"language-text\">list.pop()</code>)로 동작 구성</li>\n<li>cf) 리스트 최상단 원소부터 출력 (<code class=\"language-text\">list[::-1]</code>)</li>\n</ul>\n</li>\n<li>Queue: 선입 선출 (FIFO)\n<ul>\n<li>deque 라이브러리 사용: <code class=\"language-text\">from collections import deque</code>, <code class=\"language-text\">queue=deque()</code></li>\n<li>insert(<code class=\"language-text\">queue.append()</code>), delete(<code class=\"language-text\">queue.popleft()</code>)로 동작 구성</li>\n<li>cf) 나중에 들어온 원소부터 출력 (<code class=\"language-text\">queue.reverse()</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>필수 개념</p>\n<ul>\n<li>Recursive Function: 자기 자식을 다시 호출하는 함수</li>\n<li>컴퓨터 메모리 내부의 Stack 프레임에 함수 호출이 쌓이는 방식으로 작동함</li>\n<li>DFS에 이용됨</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"예시-문제-팩토리얼-구현-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B5%AC%ED%98%84-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 팩토리얼 구현 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 팩토리얼 구현 문제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial_iterative</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># 1부터 n까지의 수를 차례때로 곱하기</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">*=</span> i\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">factorial_recursive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># n이 1 이하인 경우 1을 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># n! = n * (n-1)!를 그대로 코드로 작성</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial_recursive<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"예시-문제-유클리드-호제법-euclidean-algorithm-최대공약수-계산-문제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95-euclidean-algorithm-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98-%EA%B3%84%EC%82%B0-%EB%AC%B8%EC%A0%9C\" aria-label=\"예시 문제 유클리드 호제법 euclidean algorithm 최대공약수 계산 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 문제: 유클리드 호제법 (Euclidean Algorithm, 최대공약수 계산) 문제</h3>\n<ul>\n<li>유클리드 호제법\n<ul>\n<li>두 자연수 A,B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 한다.</li>\n<li>이 때, A와 B의 최대공약수는 B와 R의 최대공약수와 같다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># greatest common degree</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">%</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> b\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"1-dfs\" style=\"position:relative;\"><a href=\"#1-dfs\" aria-label=\"1 dfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DFS</h2>\n<ul>\n<li><strong>DFS (Depth-First Search)</strong>\n<ul>\n<li>깊이 우선 탐색, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘</li>\n<li>Stack 자료구조(혹은 재귀함수)를 이용\n<ol>\n<li>탐색 시작 노드를 Stack에 삽입하고 방문 처리</li>\n<li>Stack의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 Stack에 넣고 방문 처리. 방문하지 않은 인접 노드가 없으면 Stack에서 최상단 노드를 꺼냄</li>\n<li>더 이상 2번의 과정을 수행할 수 없을 때까지 반복함</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dfs-소스코드-예제\" style=\"position:relative;\"><a href=\"#dfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\" aria-label=\"dfs 소스코드 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DFS 소스코드 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 각 노드가 연결된 정보를 표현 (2차원 리스트)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\"># 0</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 1</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 2</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 3</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 4</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 5</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 6</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 7</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 8</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 각 노드가 방문된 정보를 표현 (1차원 리스트)</span>\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span>\n\n<span class=\"token comment\"># DFS 메서드 정의</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 현재 노드를 방문 처리</span>\n    visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 현재 노드와 연결된 다른 노드를 재귀적으로 방문</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 정의된 DFS 함수 호출</span>\ndfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"bfs\" style=\"position:relative;\"><a href=\"#bfs\" aria-label=\"bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS</h2>\n<ul>\n<li><strong>BFS (Breadth-First Search)</strong>\n<ul>\n<li>너비 우선 탐색, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘</li>\n<li>Queue 자료구조 이용\n<ol>\n<li>탐색 시작 노드를 Queue에 삽입하고 방문 처리</li>\n<li>Queue에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 Queue에 삽입하고 방문 처리</li>\n<li>더 이상 2번의 과정을 수행할 수 없을 때까지 반복</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bfs-소스코드-예제\" style=\"position:relative;\"><a href=\"#bfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\" aria-label=\"bfs 소스코드 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS 소스코드 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 각 노드가 연결된 정보를 표현 (2차원 리스트)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\"># 0</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 1</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 2</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 3</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 4</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\"># 5</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\"># 6</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># 7</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 8</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 각 노드가 방문된 정보를 표현 (1차원 리스트)</span>\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span>\n\n<span class=\"token comment\"># BFS 메서드 정의</span>\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#Queue 구현을 위해 deque 라이브러리 사용</span>\n    queue <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 현재 노드 방문 처리</span>\n    visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token comment\"># 큐가 빌 때끼지 반복</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 큐에서 하나의 원소를 뽑아 출력하기</span>\n        v <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 아직 방문하기 않은 인접한 원소들을 큐에 삽입</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token comment\"># 정의된 BFS 함수 호출</span>\nbfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/91433923\">나동빈. (2021). 이것이 취업을 위한 코딩 테스트다</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B5%AC%ED%98%84-%EB%AC%B8%EC%A0%9C\">예시 문제: 팩토리얼 구현 문제</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-%EB%AC%B8%EC%A0%9C-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95-euclidean-algorithm-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98-%EA%B3%84%EC%82%B0-%EB%AC%B8%EC%A0%9C\">예시 문제: 유클리드 호제법 (Euclidean Algorithm, 최대공약수 계산) 문제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#1-dfs\">1. DFS</a></p>\n<ul>\n<li><a href=\"#dfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\">DFS 소스코드 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#bfs\">BFS</a></p>\n<ul>\n<li><a href=\"#bfs-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%EC%98%88%EC%A0%9C\">BFS 소스코드 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 03, 2022","title":"DFS BFS 알고리즘 정리","categories":"Algorithm","author":"Mini","emoji":"🧩"},"fields":{"slug":"/DFS_BFS/"}},"site":{"siteMetadata":{"siteUrl":"https://sominsong.github.io","comments":{"utterances":{"repo":"sominsong/sominsong.github.io"}}}}},"pageContext":{"slug":"/Greedy/","nextSlug":"/CISCO-interview-preparation/","prevSlug":"/DFS_BFS/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}