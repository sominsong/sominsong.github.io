{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Algorithm",
    "result": {"pageContext":{"currentCategory":"Algorithm","categories":["All","TIL","Linux","Engilsh","Interview","Algorithm","PhD","Security","Error","Mac"],"edges":[{"node":{"id":"8c9766f2-c436-516c-87d7-6ca50cda89e9","excerpt":"가장 짧은 경로를 찾는 알고리즘 최단 경로 알고리즘이 사용될 수 있는 다양한 문제 상황 한 지점에서 다른 한 지점까지의 최단 경로 한 지점에서 다른 모든 지점까지의 최단 경로 모든 지점에서 다른 모든 지점까지의 최단 경로 Dynamic Programming 문제로 분류되기도 함 1. Dijkstra Shortest Path 알고리즘 특정한 한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로 계산 조건: 음수 Edge가 없을 때 (현실 세계의 도로) Greedy 알고리즘으로 분류: 매 상황에서 가장 비용이 적은 Node를 선택 💡 알고리즘 동작 과정 출발 노드 설정 최단 거리 테이블 초기화 (모든 노드까지의 거리 무한으로 설정 & 자기 자신까지의 거리는 0으로 설정) 최단 거리 테이블: 각 노드에 대한 현재끼ㅏ지의 최단 거리 정보 저장 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신 위 과정에…","fields":{"slug":"/Algorithm/Shortest_Path/"},"frontmatter":{"categories":"Algorithm","title":"Shortest Path 알고리즘 정리","date":"November 09, 2022"}},"next":{"fields":{"slug":"/Algorithm/Graph/"}},"previous":{"fields":{"slug":"/Interview/CS_Interview/"}}},{"node":{"id":"d1fef546-5d83-5ae7-bf87-4b75aafd193e","excerpt":"1. Disjoint Sets (서로소 집합) 자료구조 서로소: ‘공통 원소가 없는 두 집합’ 의미 서로소 집합 자료구조: 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조 서로소 집합 자료구조(= Union Find 자료구조)의 연산 Union(합집합) Find(찾기): 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산 서로소 집합 자료구조 동작 과정 Union 연산 확인 -> 서로 연결된 두 노드 A, B 확인 A와 B의 루트 노드 A’, B’를 각각 찾음 A’를 B’의 부모 노드로 설정 모든 Union 연산을 처리할 때까지 1번 과정 반복 서로소 집합 자료구조의 연결성 기본적인 형태로 서로소 집합 자료구조에서는 root 노드에 즉시 접근할 수 없음\n-> root 노드를 찾기 위해 부모 테이블을 계속해서 확인하며 거슬러 올라가야 함  기본적인 구현 방법 ‘기본적인 구현 방법’의 문제점 Union 연산이 편향되게 이루어지는 경우 Find 함수가 비효율적…","fields":{"slug":"/Algorithm/Graph/"},"frontmatter":{"categories":"Algorithm","title":"Graph 알고리즘 정리","date":"November 08, 2022"}},"next":{"fields":{"slug":"/Data_Structure/"}},"previous":{"fields":{"slug":"/Algorithm/Shortest_Path/"}}},{"node":{"id":"f3762fa5-29bd-524c-9de4-5c98b3099907","excerpt":"1. Priority Queue (우선순위 큐) & Heap (힙) Priority Queue: 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조 데이터를 우선순위에 따라 처리하고 싶을 때 사용함 Priority Queue 구현 방법 List 이용: 차례로 데이터 삽입 & 꺼낼 때 우선 순위 비교해서 높은 것부터 꺼냄 Heap 이용 데이터 개수가 N일 때, 구현 방식에 따른 시간 복잡도 우선순위 큐 구현 방식 삽입 시간 삭제 시간 List O(1) O(N) Heap O(logN) O(logN) 단순히 데이터를 Heap에 넣었다가 모두 꺼내는 작업 = 정렬 작업 ‘힙 정렬’이라고 함 시간 복잡도: O(NlogN) Heap의 특징 Heap은 Complete Binary Tree(완전 이진 트리)의 일종 항상 Root node를 제거함 Min Heap (최소 힙) root 노드가 가장 작은 값을 가짐 값이 작은 데이터가 우선적으로 제거됨 Max Heap (최대 힙) root 노…","fields":{"slug":"/Data_Structure/"},"frontmatter":{"categories":"Algorithm","title":"자료구조 정리","date":"November 07, 2022"}},"next":{"fields":{"slug":"/PhD in US/"}},"previous":{"fields":{"slug":"/Algorithm/Graph/"}}},{"node":{"id":"2a1351ad-7205-5434-9b1a-bb923782cbc1","excerpt":"0. Dynamic Programming 다이나믹 프로그래밍(=동적 계획법)은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함 다이나믹 프로그래밍의 구현: Top-Down (하향식) / Bottom-Up (상향식) Top-Down (하향식): Memorization 구현 Memorization 구현이란? 한 번 계산한 결과를 메모리 공간()에 메모하는 기법 (**Caching) 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴  Bottom-Up (상향식): 반복문 구현 “일반적인 프로그래밍 분애에서의 Dynamic이란 어떤 의미? 자료 구조에서 Dynamic Allocation은 **‘프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법’**을 의미 반면, Dynamic Programming에서 ‘Dynamic’은 별다른 의미 없이 사용된 단어 다이나믹…","fields":{"slug":"/Algorithm/Dynamic_Programming/"},"frontmatter":{"categories":"Algorithm","title":"Dynamic Programming 알고리즘 정리","date":"November 06, 2022"}},"next":{"fields":{"slug":"/Algorithm/Binary_Search/"}},"previous":{"fields":{"slug":"/PhD in US/"}}},{"node":{"id":"fdb21097-f512-5f3a-bffb-5b76b90223df","excerpt":"순차 탐색 (Sequential Search): 리스트 안에 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법 이진 탐색 (Binary Search): 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정함 시간 복잡도: O(logN) -> 단계마다 탐색 범위를 2로 나누는 것과 동일(탐색 범위를 절반씩 줄임)함므로 연산 횟수는 logN에 비례 파이썬 이진 탐색 라이브러리  : 정렬된 순서를 유지하면서 배열 에 를 삽입할 가장 왼쪽 인덱스 반환 : 정렬된 순서를 유지하면서 배열 에 를 삽입할 가장 오른쪽 인덱스 반환 값이 특정 범위에 속하는 데이터 개수 구하기 파라메트릭 서치 (Parametric Search) 최적화 문제를 결정 문제 (yes or no)로 바꾸어 해결하는 기법 e.g, 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제 일반적으로 코딩 테스트에…","fields":{"slug":"/Algorithm/Binary_Search/"},"frontmatter":{"categories":"Algorithm","title":"Binary Search 알고리즘 정리","date":"November 05, 2022"}},"next":{"fields":{"slug":"/Algorithm/Sorting/"}},"previous":{"fields":{"slug":"/Algorithm/Dynamic_Programming/"}}},{"node":{"id":"3d865a3a-a15e-5d57-916b-450dfa7c948a","excerpt":"정렬: 데이터를 틁정한 기준에 따라 순서대로 나열하는 것 일반적으로 문제 상황에 따라 적절한 정렬 알고리즘이 공식처럼 사용됨 0. 정렬 알고리즘 비교하기 정렬 알고리즘 평균 시간 복잡도 공간 복잡도 특징 Selection Sort O(N^2) O(N) 아이디어 매우 간단 Insertion Sort O(N^2) O(N) 데이터가 거의 정렬되어 있을 때, 가장 빠름 Quick Sort O(NlogN) O(N) 대부분의 경우 가장 적합, 충분히 빠름 Counting Sort O(N+K) O(N+K) 데이터의 크기가 한정되어 있는 경우에만 사용 가능, 매우 빠름 1. 선택 정렬 (Selection Sort) 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복 시간 복잡도: N번만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다 전체 연산 횟수: 등차수열 N + (N-1) + (N-2) + … + 2 => (N^2 + N -2)/2 => O(N^…","fields":{"slug":"/Algorithm/Sorting/"},"frontmatter":{"categories":"Algorithm","title":"Sorting 알고리즘 정리","date":"November 04, 2022"}},"next":{"fields":{"slug":"/Algorithm/DFS_BFS/"}},"previous":{"fields":{"slug":"/Algorithm/Binary_Search/"}}},{"node":{"id":"7689f5dc-91fd-5c36-9e18-038c7e226e5e","excerpt":"대표적인 그래프 탐색 알고리즘 Search란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미 필수 자료구조 Stack: 선입 후출 (FILO) insert(), delete()로 동작 구성 cf) 리스트 최상단 원소부터 출력 () Queue: 선입 선출 (FIFO) deque 라이브러리 사용: ,  insert(), delete()로 동작 구성 cf) 나중에 들어온 원소부터 출력 () 필수 개념 Recursive Function: 자기 자식을 다시 호출하는 함수 컴퓨터 메모리 내부의 Stack 프레임에 함수 호출이 쌓이는 방식으로 작동함 DFS에 이용됨 예시 문제: 팩토리얼 구현 문제 예시 문제: 유클리드 호제법 (Euclidean Algorithm, 최대공약수 계산) 문제 유클리드 호제법 두 자연수 A,B에 대하여 (A>B) A를 B로 나눈 나머지를 R이라고 한다. 이 때, A와 B의 최대공약수는 B와 R의 최대공약수와 같다. 1. DFS DFS (Depth-First…","fields":{"slug":"/Algorithm/DFS_BFS/"},"frontmatter":{"categories":"Algorithm","title":"DFS BFS 알고리즘 정리","date":"November 03, 2022"}},"next":{"fields":{"slug":"/Algorithm/Greedy/"}},"previous":{"fields":{"slug":"/Algorithm/Sorting/"}}},{"node":{"id":"20a049a8-b679-5821-bcab-18100a313358","excerpt":"Greedy Algorithm 현재 상황에서 지금 당장 좋은 것만 고르는 방법 일반적으로 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력 요구 Greedy Solution은 정당성이 중요 = 단순히 현재 상황에서 가장 좋은 것을 반복적으로 선택하는 것만으로도 최적의 해를 구할 수 있는지? 보장해야 함 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다. 하지만, 코테의 경우는 출제자가 그리디로 얻은 해가 최적의 해가 되는 특수한 상황을 제시하기 때문에 예외다. 예시 문제: 거스름돈 문제 정당성 분석: 가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는? 가지고 있는 동전 중에서 ”큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문” 만약 800원을 거슬러주어야 하는데 화폐 단위가 500원, 400원, 100원일 경우는 해당하지 않음 답안 예시 시간 복잡도 분석 금액 자체와는 무관…","fields":{"slug":"/Algorithm/Greedy/"},"frontmatter":{"categories":"Algorithm","title":"Greedy 알고리즘 정리","date":"November 02, 2022"}},"next":{"fields":{"slug":"/Interview/CISCO-interview-preparation/"}},"previous":{"fields":{"slug":"/Algorithm/DFS_BFS/"}}},{"node":{"id":"02e027c1-d496-5c9c-9e98-911926779f57","excerpt":"알고리즘 사이트 백준 유형별 단계별로 정리되어 있는 곳 프로그래머스 코드포스 알고리즘 순서 그리디(Greedy) 알고리즘 탐색(Search) 알고리즘 - 완전 탐색, BFS, DFS 기본 동적 프로그래밍 그래프 이론 문자열 고급 동적 프로그래밍 유용 Python 라이브러리 : 반복 데이터 처리 / 순열과 조합 / 완전 탐색 알고리즘 : 우선순위 큐 / Dijkstra Algorithm와 같은 최단 경로 알고리즘 : Binary Search : deque, counter 자료구조 포함 : 수학 기능 알고리즘 개념 정리 0. Complexity Timte Complexity: 특정 크기 입력에 대한 수행 시간 Space Complexity: 특정 크기 입력에 대한 메모리 사용량 Big-O Notation 가장 빠르게 증가하는 항만을 고려하는 표기법 함수의 상한을 나타냄 3N^3 + 5N^2 + 1,000,000 -> O(N^3) 시간 복잡도 비교 O(1) Constant time (상…","fields":{"slug":"/Algorithm/Algorithm/"},"frontmatter":{"categories":"Algorithm","title":"알고리즘 공부 순서 정리 및 사이트 정리","date":"November 01, 2022"}},"next":{"fields":{"slug":"/TIL/BPF-LSM/"}},"previous":{"fields":{"slug":"/TIL/Seccomp-BPF/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}