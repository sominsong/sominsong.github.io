{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Linux",
    "result": {"pageContext":{"currentCategory":"Linux","categories":["All","Algorithm","PhD","Cisco","Interview","TIL","Linux","Security","Error","Mac","AWS"],"edges":[{"node":{"id":"cbdd7171-0b01-57b9-8ba0-7d07f0784fd5","excerpt":"네트워킹 외부에서 BPF VM을 사용한 첫 번째 사례는  시스템콜에 대한 액세스 제어 정책을 구현하는 것이었다.","fields":{"slug":"/Seccomp-BPF/"},"frontmatter":{"categories":"TIL Linux","title":"TIL - Seccomp-BPF","date":"November 01, 2022"}},"next":{"fields":{"slug":"/Algorithm/"}},"previous":{"fields":{"slug":"/CISCO-interview-preparation/"}}},{"node":{"id":"ba844679-8b48-511e-87ab-09f24c363b56","excerpt":"석사 과정동안 진행했던 과제에서 BPF-LSM 기술을 사용하여 컨테이너 환경을 위한 보안 모듈을 개발한 적이 있다.\n이번 기회에 관련된 내용들을 복습하고, 또 정리해두면 좋을 것 같았다. 0. BPF-LSM 기술이란 BPF-LSM 기술을 한 마디로 정리하자면 다음과 같다. Privileged User가 MAC(Mandatory Access Control) 및 Audit 정책을 구현하기 위해 BPF 프로그램을 LSM Hook에 연결하여 시스템을 런타임 계측(Runtime Instrumentation)하는 보안 모듈 즉, BPF-LSM이란 기술을 이해하기 위해선 MAC, BPF, LSM에 대한 개념이 선행되어야 한다.\n따라서 BPF-LSM을 본격적으로 정리하기에 앞서, 관련 기술들을 먼저 하나씩 정리해보았다. 정리된 글들은 다음에서 확인할 수 있다. eBPF BCC LSM BPF-LSM 기술을 알기 위해서는 KSRI 기술을 먼저 이해해야 한다.\nKRSI는 BPF-LSM이 커널 메인스트…","fields":{"slug":"/BPF-LSM/"},"frontmatter":{"categories":"TIL Linux","title":"TIL - BPF-LSM","date":"October 31, 2022"}},"next":{"fields":{"slug":"/BCC/"}},"previous":{"fields":{"slug":"/Algorithm/"}}},{"node":{"id":"0489ec5c-997d-5236-8341-bff4776f9677","excerpt":"BCC는 커널 tracing이나 manipulation 프로그램을 만들기 위한 유용한 toolkit을 제공하는 오픈 소스이다. 맨처음 eBPF 프로그램을 작성하기 시작한다면, 어려워하는 부분이 바로 eBPF 프로그램을 컴파일하고 커널 소스코드에서 eBPF 라이브러리를 연결하는 부분일 것이다.\n이러한 부분을 해결해주기 위해 등장한 Toolkit이 BCC라고 보면 된다. 즉, BCC는 eBPF 프로그램 작성, 컴파일 및 로드를 위한 Toolchain을 제공하고, 뿐만 아니라 performance issue 디버깅 및 진단을 위한 여러 가지 예제 프로그램과 도구도 제공한다. 2015년 4월 출시 이후 많은 개발자에 의해 BCC가 발전했으며, 수많은 예제 코드와 함께 즉시 사용 가능한 tracing tool이 제작되었다. 예를 들어, garbage collection 이벤트 추적, method call과 system call 추적, 스레드 생성 및 소멸 추적을 위해 작성된 USDT(Use…","fields":{"slug":"/BCC/"},"frontmatter":{"categories":"TIL Linux","title":"TIL - BCC (eBPF Compiler Collection)","date":"October 27, 2022"}},"next":{"fields":{"slug":"/Security_3/"}},"previous":{"fields":{"slug":"/BPF-LSM/"}}},{"node":{"id":"996b6409-eec7-56e0-90b3-a4a89d08b703","excerpt":"0. LSM (Linux Security Module) Linux Security Module(LSM) 프레임워크는 Security Module을 지원하는 커널 프레임워크를 제공한다.\n특히, LSM은 리눅스에서 MAC(Mandatory Access Control; 강제 접근 제어)을 구현하는데 중점을 두고 있지만, 향후에는 샌드박싱과 같은 다른 보안 요구 사항을 해결할 수 있다. LSM 프레임워크 그 자체로는 추가적인 보안 기능을 제공하지는 않는다. 다만, Security Module을 지원하기 위한 인프라를 제공할 뿐이다.\nLSM은 매번 커널 소스 코드를 구정할 필요 없이 MAC을 구현하기 위한 필수적인 컴포넌트들을 제공한다.\n이러한 LSM을 활용하면 application whitelist를 쉽고 편리하게 구현할 수 있다. LSM 프레임워크는 리눅스 커널 곳곳에 Hook을 넣어 커널에서 발생하는 여러 민감한 동작 부분에서 Hook을 Security Module에게 제공하고,\n해당…","fields":{"slug":"/LSM/"},"frontmatter":{"categories":"TIL Linux","title":"TIL - LSM(Linux Security Module)","date":"October 26, 2022"}},"next":{"fields":{"slug":"/xcrun_error/"}},"previous":{"fields":{"slug":"/Security_3/"}}},{"node":{"id":"5635502b-758d-5ada-a10b-a2f6674cf324","excerpt":"리눅스 커널에 대해 공부한다면, eBPF에 대해 한 번쯤은 들어봤을 것이다.\n필자가 주로 연구했던 분야인 Seccomp도 BPF 기술을 이용하는 리눅스 커널의 보안 모듈이다.\n따라서 석사 과정동안 공부했던 내용들을 기록하기 위해서는 가장 먼저 BPF에 대한 정리가 필요할 것 같아, 이렇게 기록하고자 한다. 0. BPF BPF란 Berkeley Packet Filter의 약자이다(였다).\n이 개념은 1992년 Steve McCane과 Van Jacobson의 Usenix Conference Winter ‘93 논문 “The BSD Packet Filter: A New Architecture for User-level Packet Capture”에서 처음으로 소개되었다.\n커널과 같은 Privileged context에서 sandboxed program을 실행할 수 있는 기술이다.\n즉, 커널 내부에 사용자가 작성한 코드를 삽입하여 안전하게 실행시킬 수 있는 도구이며, 커널 모듈이 아닌 …","fields":{"slug":"/eBPF/"},"frontmatter":{"categories":"TIL Linux","title":"TIL - eBPF","date":"October 24, 2022"}},"next":{"fields":{"slug":"/AWS-interview/"}},"previous":{"fields":{"slug":"/xcrun_error/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}