{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Algorithm/",
    "result": {"data":{"cur":{"id":"823a0dd8-02b8-5ba2-8cc9-82cd03c5dffd","html":"<h2 id=\"알고리즘-사이트\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"알고리즘 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 사이트</h2>\n<ul>\n<li><a href=\"https://www.acmicpc.net/step\">백준</a>\n<ul>\n<li><a href=\"https://www.acmicpc.net/step\">유형별 단계별로 정리되어 있는 곳</a></li>\n</ul>\n</li>\n<li><a href=\"https://programmers.co.kr\">프로그래머스</a></li>\n<li><a href=\"https://codeforces.com\">코드포스</a></li>\n</ul>\n<h2 id=\"알고리즘-순서\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%88%9C%EC%84%9C\" aria-label=\"알고리즘 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 순서</h2>\n<ol>\n<li><strong>그리디(Greedy) 알고리즘</strong></li>\n<li><strong>탐색(Search) 알고리즘</strong> - 완전 탐색, BFS, DFS</li>\n<li><strong>기본 동적 프로그래밍</strong></li>\n<li>그래프 이론</li>\n<li>문자열</li>\n<li>고급 동적 프로그래밍</li>\n</ol>\n<h2 id=\"유용-python-라이브러리\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9A%A9-python-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"유용 python 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유용 Python 라이브러리</h2>\n<ul>\n<li><code class=\"language-text\">itertools</code>: 반복 데이터 처리 / 순열과 조합 / 완전 탐색 알고리즘</li>\n<li><code class=\"language-text\">heapq</code>: 우선순위 큐 / Dijkstra Algorithm와 같은 최단 경로 알고리즘</li>\n<li><code class=\"language-text\">bisect</code>: Binary Search</li>\n<li><code class=\"language-text\">collections</code>: deque, counter 자료구조 포함</li>\n<li><code class=\"language-text\">math</code>: 수학 기능</li>\n</ul>\n<h2 id=\"알고리즘-개념-정리\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC\" aria-label=\"알고리즘 개념 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 개념 정리</h2>\n<h3 id=\"0-complexity\" style=\"position:relative;\"><a href=\"#0-complexity\" aria-label=\"0 complexity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. Complexity</h3>\n<ul>\n<li>\n<p>Timte Complexity: 특정 크기 입력에 대한 수행 시간</p>\n</li>\n<li>\n<p>Space Complexity: 특정 크기 입력에 대한 메모리 사용량</p>\n</li>\n<li>\n<p>Big-O Notation</p>\n<ul>\n<li>\n<p>가장 빠르게 증가하는 항만을 고려하는 표기법</p>\n<ul>\n<li>함수의 상한을 나타냄</li>\n<li>3N^3 + 5N^2 + 1,000,000 -> O(N^3)</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도 비교</p>\n<ul>\n<li>O(1) Constant time (상수 시간)</li>\n<li>O(log N) Log time (로그 시간)</li>\n<li>O(N) Linear time (선형 시간)</li>\n<li>O(NlogN) Log linear time (로그 선형 시간)</li>\n<li>O(N^2) 이차 시간</li>\n<li>O(N^3) 삼차 시간</li>\n<li>O(2^n) Exponential time (지수 시간)</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도에 따른 수행시간 요구 사항 (시간제한: 1초)</p>\n<ul>\n<li>N &#x3C;= 500 : O(N^3)</li>\n<li>N &#x3C;= 2,000 : O(N^2)</li>\n<li>N &#x3C;= 100,000 : O(NlogN)</li>\n<li>N &#x3C;= 10,000,000 : O(N)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-greedy\" style=\"position:relative;\"><a href=\"#1-greedy\" aria-label=\"1 greedy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Greedy</h3>\n<p><a href=\"https://sominsong.github.io/Greedy\">Greedy 알고리즘 정리 바로가기</a></p>\n<h3 id=\"2-dfs--bfs\" style=\"position:relative;\"><a href=\"#2-dfs--bfs\" aria-label=\"2 dfs  bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DFS &#x26; BFS</h3>\n<p><a href=\"https://sominsong.github.io/DFS_BFS\">DFS BFS 알고리즘 정리 바로가기</a></p>\n<h3 id=\"3-sorting\" style=\"position:relative;\"><a href=\"#3-sorting\" aria-label=\"3 sorting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Sorting</h3>\n<p><a href=\"https://sominsong.github.io/Sorting\">Sorting 알고리즘 정리 바로가기</a></p>\n<h3 id=\"4-binary-search\" style=\"position:relative;\"><a href=\"#4-binary-search\" aria-label=\"4 binary search permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Binary Search</h3>\n<p><a href=\"https://sominsong.github.io/Binary_Search\">Binary Search 알고리즘 정리 바로가기</a></p>\n<h3 id=\"5-dynamic-programming\" style=\"position:relative;\"><a href=\"#5-dynamic-programming\" aria-label=\"5 dynamic programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Dynamic Programming</h3>\n<p><a href=\"https://sominsong.github.io/Dynamic_Programming\">Dynamic Programming 알고리즘 정리 바로가기</a></p>\n<h3 id=\"6-shortest-path\" style=\"position:relative;\"><a href=\"#6-shortest-path\" aria-label=\"6 shortest path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Shortest Path</h3>\n<p><a href=\"https://sominsong.github.io/Shortest_Path\">Shortest Path 알고리즘 정리 바로가기</a></p>\n<h3 id=\"7-graph\" style=\"position:relative;\"><a href=\"#7-graph\" aria-label=\"7 graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Graph</h3>\n<p><a href=\"https://sominsong.github.io/Graph\">Graph 알고리즘 정리 바로가기</a></p>\n<h2 id=\"자료-구조-정리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EB%A6%AC\" aria-label=\"자료 구조 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 구조 정리</h2>\n<p><a href=\"https://sominsong.github.io/Data_Structure\">자료 구조 정리 바로가기</a></p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/91433923\">나동빈. (2021). 이것이 취업을 위한 코딩 테스트다</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%82%AC%EC%9D%B4%ED%8A%B8\">알고리즘 사이트</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%88%9C%EC%84%9C\">알고리즘 순서</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9C%A0%EC%9A%A9-python-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\">유용 Python 라이브러리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC\">알고리즘 개념 정리</a></p>\n<ul>\n<li><a href=\"#0-complexity\">0. Complexity</a></li>\n<li><a href=\"#1-greedy\">1. Greedy</a></li>\n<li><a href=\"#2-dfs--bfs\">2. DFS &#x26; BFS</a></li>\n<li><a href=\"#3-sorting\">3. Sorting</a></li>\n<li><a href=\"#4-binary-search\">4. Binary Search</a></li>\n<li><a href=\"#5-dynamic-programming\">5. Dynamic Programming</a></li>\n<li><a href=\"#6-shortest-path\">6. Shortest Path</a></li>\n<li><a href=\"#7-graph\">7. Graph</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EB%A6%AC\">자료 구조 정리</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","excerpt":"알고리즘 사이트 백준 유형별 단계별로 정리되어 있는 곳 프로그래머스 코드포스 알고리즘 순서 그리디(Greedy) 알고리즘 탐색(Search) 알고리즘 - 완전 탐색, BFS, DFS 기본 동적 프로그래밍 그래프 이론 문자열 고급 동적 프로그래밍 유용 Python 라이브러리 : 반복 데이터 처리 / 순열과 조합 / 완전 탐색 알고리즘 : 우선순위 큐 / Dijkstra Algorithm와 같은 최단 경로 알고리즘 : Binary Search : deque, counter 자료구조 포함 : 수학 기능 알고리즘 개념 정리 0. Complexity Timte Complexity: 특정 크기 입력에 대한 수행 시간 Space Complexity: 특정 크기 입력에 대한 메모리 사용량 Big-O Notation 가장 빠르게 증가하는 항만을 고려하는 표기법 함수의 상한을 나타냄 3N^3 + 5N^2 + 1,000,000 -> O(N^3) 시간 복잡도 비교 O(1) Constant time (상…","frontmatter":{"date":"November 01, 2022","title":"알고리즘 공부 순서 정리 및 사이트 정리","categories":"Algorithm","author":"Mini","emoji":"🧩"},"fields":{"slug":"/Algorithm/"}},"next":{"id":"ba844679-8b48-511e-87ab-09f24c363b56","html":"<p>석사 과정동안 진행했던 과제에서 BPF-LSM 기술을 사용하여 컨테이너 환경을 위한 보안 모듈을 개발한 적이 있다.\n이번 기회에 관련된 내용들을 복습하고, 또 정리해두면 좋을 것 같았다.</p>\n<h2 id=\"0-bpf-lsm-기술이란\" style=\"position:relative;\"><a href=\"#0-bpf-lsm-%EA%B8%B0%EC%88%A0%EC%9D%B4%EB%9E%80\" aria-label=\"0 bpf lsm 기술이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. BPF-LSM 기술이란</h2>\n<p>BPF-LSM 기술을 한 마디로 정리하자면 다음과 같다.</p>\n<blockquote>\n<p>Privileged User가 MAC(Mandatory Access Control) 및 Audit 정책을 구현하기 위해 BPF 프로그램을 LSM Hook에 연결하여 시스템을 런타임 계측(Runtime Instrumentation)하는 보안 모듈</p>\n</blockquote>\n<p>즉, BPF-LSM이란 기술을 이해하기 위해선 MAC, BPF, LSM에 대한 개념이 선행되어야 한다.\n따라서 BPF-LSM을 본격적으로 정리하기에 앞서, 관련 기술들을 먼저 하나씩 정리해보았다.</p>\n<p>정리된 글들은 다음에서 확인할 수 있다.</p>\n<ul>\n<li><a href=\"https://sominsong.github.io/eBPF/\"><strong>eBPF</strong></a></li>\n<li><a href=\"https://sominsong.github.io/BCC/\"><strong>BCC</strong></a></li>\n<li><a href=\"https://sominsong.github.io/LSM/\"><strong>LSM</strong></a></li>\n</ul>\n<p>BPF-LSM 기술을 알기 위해서는 KSRI 기술을 먼저 이해해야 한다.\nKRSI는 BPF-LSM이 커널 메인스트림에 병합되기 전 진행되었던 프로젝트의 이름으로 BPF-LSM의 전신이라고 할 수 있다.</p>\n<h2 id=\"1-krsi---kernel-runtime-security-instrumentation\" style=\"position:relative;\"><a href=\"#1-krsi---kernel-runtime-security-instrumentation\" aria-label=\"1 krsi   kernel runtime security instrumentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. KRSI - Kernel Runtime Security Instrumentation</h2>\n<p>기존에 리눅스 환경에서 보안을 강화하는 방법에는 크게 두 가지가 존재했다.\n하나는 악의적인 움직임을 감지하고 이에 대한 정보를 제공하는 것과 다른 하나는 특정 rule에 해당하는 악의적인 움직임을 차단하는 것이다.</p>\n<p>전자에 해당하는 보안 모듈의 경우, 사전에 정의된 규칙에 따라 시스템에서 발생하는 보안 관련 이벤트를 로그로 기록하는 Audit과 Kernel Tracing Point를 이용하여 시스템의 명령이나 어플리케이션의 영향을 추적하는 Perf 등이 있다.</p>\n<p>후자에 해당하는 보안 모듈의 경우, 정해진 Profile에 따라 액세스를 제어하는 SELinux, AppArmor, 프로세스가 사용할 수 있는 시스템콜을 제한하는 Seccomp 등이 있다.</p>\n<p>이 두 가지는 이전까지 ‘동전의 양면’ 관계로 존재했으며, 두 가지 측면에 대하여 서로 다른 모듈로써 존재하기 때문에 동시에 관리하기가 어려웠다.</p>\n<p>이에 KRSI는 이 두 가지를 하나의 API로 제공하여 전반적인 시스템 동작을 제어 및 감시할 수 있도록 만드는 프로젝트이다.</p>\n<p>KRSI의 특징은 다음과 같다:</p>\n<ul>\n<li>악의적인 행동을 기록하는 것 &#x26; 차단하는 것, 두 가지에 대한 Rule을 작성할 수 있는 통합적인 API를 제공</li>\n<li>LSM(Linux Security Module) 이벤트를 이용하여 세세한 MAC 규칙을 시스템에 적용</li>\n<li>eBPF 기반 기술이기 때문에 Rule Update 시 커널의 재 컴파일이 불필요</li>\n</ul>\n<h2 id=\"2-krsi-구현\" style=\"position:relative;\"><a href=\"#2-krsi-%EA%B5%AC%ED%98%84\" aria-label=\"2 krsi 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. KRSI 구현</h2>\n<p>앞서 간략히 설명했듯이, KRSI는 eBPF와 LSM(Linux Security Module)을 이용해서 구현된다.\nLSM은</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://lwn.net/Articles/808048/\">https://lwn.net/Articles/808048/</a></li>\n</ul>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"sominsong/sominsong.github.io\"\n        issue-term=\"pathname\"\n        label=\"Comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#0-bpf-lsm-%EA%B8%B0%EC%88%A0%EC%9D%B4%EB%9E%80\">0. BPF-LSM 기술이란</a></li>\n<li><a href=\"#1-krsi---kernel-runtime-security-instrumentation\">1. KRSI - Kernel Runtime Security Instrumentation</a></li>\n<li><a href=\"#2-krsi-%EA%B5%AC%ED%98%84\">2. KRSI 구현</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 31, 2022","title":"TIL - BPF-LSM","categories":"TIL Linux","author":"Mini","emoji":"📖"},"fields":{"slug":"/BPF-LSM/"}},"prev":{"id":"cbdd7171-0b01-57b9-8ba0-7d07f0784fd5","html":"<p>네트워킹 외부에서 BPF VM을 사용한 첫 번째 사례는 <code class=\"language-text\">seccomp()</code> 시스템콜에 대한 액세스 제어 정책을 구현하는 것이었다.</p>","frontmatter":{"date":"November 01, 2022","title":"TIL - Seccomp-BPF","categories":"TIL Linux","author":"Mini","emoji":"📖"},"fields":{"slug":"/Seccomp-BPF/"}},"site":{"siteMetadata":{"siteUrl":"https://sominsong.github.io","comments":{"utterances":{"repo":"sominsong/sominsong.github.io"}}}}},"pageContext":{"slug":"/Algorithm/","nextSlug":"/BPF-LSM/","prevSlug":"/Seccomp-BPF/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}